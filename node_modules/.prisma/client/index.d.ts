
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model Candidate
 * 
 */
export type Candidate = $Result.DefaultSelection<Prisma.$CandidatePayload>
/**
 * Model CvFile
 * 
 */
export type CvFile = $Result.DefaultSelection<Prisma.$CvFilePayload>
/**
 * Model CandidateText
 * 
 */
export type CandidateText = $Result.DefaultSelection<Prisma.$CandidateTextPayload>
/**
 * Model Vector
 * 
 */
export type Vector = $Result.DefaultSelection<Prisma.$VectorPayload>
/**
 * Model JobVector
 * 
 */
export type JobVector = $Result.DefaultSelection<Prisma.$JobVectorPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model GeneratedSummary
 * 
 */
export type GeneratedSummary = $Result.DefaultSelection<Prisma.$GeneratedSummaryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  RECRUITER: 'RECRUITER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CvStatus: {
  PENDING: 'PENDING',
  PARSING: 'PARSING',
  PARSED: 'PARSED',
  ERROR: 'ERROR'
};

export type CvStatus = (typeof CvStatus)[keyof typeof CvStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CvStatus = $Enums.CvStatus

export const CvStatus: typeof $Enums.CvStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tenants
 * const tenants = await prisma.tenant.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tenants
   * const tenants = await prisma.tenant.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cvFile`: Exposes CRUD operations for the **CvFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CvFiles
    * const cvFiles = await prisma.cvFile.findMany()
    * ```
    */
  get cvFile(): Prisma.CvFileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidateText`: Exposes CRUD operations for the **CandidateText** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidateTexts
    * const candidateTexts = await prisma.candidateText.findMany()
    * ```
    */
  get candidateText(): Prisma.CandidateTextDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vector`: Exposes CRUD operations for the **Vector** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vectors
    * const vectors = await prisma.vector.findMany()
    * ```
    */
  get vector(): Prisma.VectorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobVector`: Exposes CRUD operations for the **JobVector** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobVectors
    * const jobVectors = await prisma.jobVector.findMany()
    * ```
    */
  get jobVector(): Prisma.JobVectorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.generatedSummary`: Exposes CRUD operations for the **GeneratedSummary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratedSummaries
    * const generatedSummaries = await prisma.generatedSummary.findMany()
    * ```
    */
  get generatedSummary(): Prisma.GeneratedSummaryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.1
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tenant: 'Tenant',
    User: 'User',
    Job: 'Job',
    Candidate: 'Candidate',
    CvFile: 'CvFile',
    CandidateText: 'CandidateText',
    Vector: 'Vector',
    JobVector: 'JobVector',
    Match: 'Match',
    GeneratedSummary: 'GeneratedSummary'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "tenant" | "user" | "job" | "candidate" | "cvFile" | "candidateText" | "vector" | "jobVector" | "match" | "generatedSummary"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TenantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      Candidate: {
        payload: Prisma.$CandidatePayload<ExtArgs>
        fields: Prisma.CandidateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findFirst: {
            args: Prisma.CandidateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findMany: {
            args: Prisma.CandidateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          create: {
            args: Prisma.CandidateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          createMany: {
            args: Prisma.CandidateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          delete: {
            args: Prisma.CandidateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          update: {
            args: Prisma.CandidateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          deleteMany: {
            args: Prisma.CandidateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          upsert: {
            args: Prisma.CandidateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          aggregate: {
            args: Prisma.CandidateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidate>
          }
          groupBy: {
            args: Prisma.CandidateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateCountAggregateOutputType> | number
          }
        }
      }
      CvFile: {
        payload: Prisma.$CvFilePayload<ExtArgs>
        fields: Prisma.CvFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CvFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CvFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>
          }
          findFirst: {
            args: Prisma.CvFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CvFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>
          }
          findMany: {
            args: Prisma.CvFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>[]
          }
          create: {
            args: Prisma.CvFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>
          }
          createMany: {
            args: Prisma.CvFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CvFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>[]
          }
          delete: {
            args: Prisma.CvFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>
          }
          update: {
            args: Prisma.CvFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>
          }
          deleteMany: {
            args: Prisma.CvFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CvFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CvFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>[]
          }
          upsert: {
            args: Prisma.CvFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CvFilePayload>
          }
          aggregate: {
            args: Prisma.CvFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCvFile>
          }
          groupBy: {
            args: Prisma.CvFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<CvFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.CvFileCountArgs<ExtArgs>
            result: $Utils.Optional<CvFileCountAggregateOutputType> | number
          }
        }
      }
      CandidateText: {
        payload: Prisma.$CandidateTextPayload<ExtArgs>
        fields: Prisma.CandidateTextFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateTextFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateTextFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>
          }
          findFirst: {
            args: Prisma.CandidateTextFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateTextFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>
          }
          findMany: {
            args: Prisma.CandidateTextFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>[]
          }
          create: {
            args: Prisma.CandidateTextCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>
          }
          createMany: {
            args: Prisma.CandidateTextCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateTextCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>[]
          }
          delete: {
            args: Prisma.CandidateTextDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>
          }
          update: {
            args: Prisma.CandidateTextUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>
          }
          deleteMany: {
            args: Prisma.CandidateTextDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateTextUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateTextUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>[]
          }
          upsert: {
            args: Prisma.CandidateTextUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateTextPayload>
          }
          aggregate: {
            args: Prisma.CandidateTextAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidateText>
          }
          groupBy: {
            args: Prisma.CandidateTextGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateTextGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateTextCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateTextCountAggregateOutputType> | number
          }
        }
      }
      Vector: {
        payload: Prisma.$VectorPayload<ExtArgs>
        fields: Prisma.VectorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VectorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VectorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>
          }
          findFirst: {
            args: Prisma.VectorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VectorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>
          }
          findMany: {
            args: Prisma.VectorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>[]
          }
          create: {
            args: Prisma.VectorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>
          }
          createMany: {
            args: Prisma.VectorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VectorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>[]
          }
          delete: {
            args: Prisma.VectorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>
          }
          update: {
            args: Prisma.VectorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>
          }
          deleteMany: {
            args: Prisma.VectorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VectorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VectorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>[]
          }
          upsert: {
            args: Prisma.VectorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorPayload>
          }
          aggregate: {
            args: Prisma.VectorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVector>
          }
          groupBy: {
            args: Prisma.VectorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VectorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VectorCountArgs<ExtArgs>
            result: $Utils.Optional<VectorCountAggregateOutputType> | number
          }
        }
      }
      JobVector: {
        payload: Prisma.$JobVectorPayload<ExtArgs>
        fields: Prisma.JobVectorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobVectorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobVectorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>
          }
          findFirst: {
            args: Prisma.JobVectorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobVectorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>
          }
          findMany: {
            args: Prisma.JobVectorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>[]
          }
          create: {
            args: Prisma.JobVectorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>
          }
          createMany: {
            args: Prisma.JobVectorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobVectorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>[]
          }
          delete: {
            args: Prisma.JobVectorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>
          }
          update: {
            args: Prisma.JobVectorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>
          }
          deleteMany: {
            args: Prisma.JobVectorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobVectorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobVectorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>[]
          }
          upsert: {
            args: Prisma.JobVectorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobVectorPayload>
          }
          aggregate: {
            args: Prisma.JobVectorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobVector>
          }
          groupBy: {
            args: Prisma.JobVectorGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobVectorGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobVectorCountArgs<ExtArgs>
            result: $Utils.Optional<JobVectorCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      GeneratedSummary: {
        payload: Prisma.$GeneratedSummaryPayload<ExtArgs>
        fields: Prisma.GeneratedSummaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneratedSummaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneratedSummaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          findFirst: {
            args: Prisma.GeneratedSummaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneratedSummaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          findMany: {
            args: Prisma.GeneratedSummaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>[]
          }
          create: {
            args: Prisma.GeneratedSummaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          createMany: {
            args: Prisma.GeneratedSummaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneratedSummaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>[]
          }
          delete: {
            args: Prisma.GeneratedSummaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          update: {
            args: Prisma.GeneratedSummaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          deleteMany: {
            args: Prisma.GeneratedSummaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneratedSummaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GeneratedSummaryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>[]
          }
          upsert: {
            args: Prisma.GeneratedSummaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedSummaryPayload>
          }
          aggregate: {
            args: Prisma.GeneratedSummaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneratedSummary>
          }
          groupBy: {
            args: Prisma.GeneratedSummaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneratedSummaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneratedSummaryCountArgs<ExtArgs>
            result: $Utils.Optional<GeneratedSummaryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    tenant?: TenantOmit
    user?: UserOmit
    job?: JobOmit
    candidate?: CandidateOmit
    cvFile?: CvFileOmit
    candidateText?: CandidateTextOmit
    vector?: VectorOmit
    jobVector?: JobVectorOmit
    match?: MatchOmit
    generatedSummary?: GeneratedSummaryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    users: number
    jobs: number
    candidates: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | TenantCountOutputTypeCountUsersArgs
    jobs?: boolean | TenantCountOutputTypeCountJobsArgs
    candidates?: boolean | TenantCountOutputTypeCountCandidatesArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCandidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    jobVectors: number
    matches: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobVectors?: boolean | JobCountOutputTypeCountJobVectorsArgs
    matches?: boolean | JobCountOutputTypeCountMatchesArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountJobVectorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobVectorWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }


  /**
   * Count Type CandidateCountOutputType
   */

  export type CandidateCountOutputType = {
    cvs: number
    texts: number
    matches: number
  }

  export type CandidateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cvs?: boolean | CandidateCountOutputTypeCountCvsArgs
    texts?: boolean | CandidateCountOutputTypeCountTextsArgs
    matches?: boolean | CandidateCountOutputTypeCountMatchesArgs
  }

  // Custom InputTypes
  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateCountOutputType
     */
    select?: CandidateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountCvsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CvFileWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountTextsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateTextWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    users?: boolean | Tenant$usersArgs<ExtArgs>
    jobs?: boolean | Tenant$jobsArgs<ExtArgs>
    candidates?: boolean | Tenant$candidatesArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type TenantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt", ExtArgs["result"]["tenant"]>
  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Tenant$usersArgs<ExtArgs>
    jobs?: boolean | Tenant$jobsArgs<ExtArgs>
    candidates?: boolean | Tenant$candidatesArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TenantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      jobs: Prisma.$JobPayload<ExtArgs>[]
      candidates: Prisma.$CandidatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants and returns the data updated in the database.
     * @param {TenantUpdateManyAndReturnArgs} args - Arguments to update many Tenants.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TenantUpdateManyAndReturnArgs>(args: SelectSubset<T, TenantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Tenant$usersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobs<T extends Tenant$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidates<T extends Tenant$candidatesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$candidatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
  }

  /**
   * Tenant updateManyAndReturn
   */
  export type TenantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to delete.
     */
    limit?: number
  }

  /**
   * Tenant.users
   */
  export type Tenant$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tenant.jobs
   */
  export type Tenant$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Tenant.candidates
   */
  export type Tenant$candidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    cursor?: CandidateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    email: string | null
    name: string | null
    role: $Enums.UserRole | null
    password: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    email: string | null
    name: string | null
    role: $Enums.UserRole | null
    password: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    tenantId: number
    email: number
    name: number
    role: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    name?: true
    role?: true
    password?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    name?: true
    role?: true
    password?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    name?: true
    role?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    tenantId: string
    email: string
    name: string | null
    role: $Enums.UserRole
    password: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    password?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    password?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    password?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    tenantId?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "email" | "name" | "role" | "password" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      email: string
      name: string | null
      role: $Enums.UserRole
      password: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly tenantId: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    title: string | null
    description: string | null
    createdById: string | null
    createdAt: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    title: string | null
    description: string | null
    createdById: string | null
    createdAt: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    tenantId: number
    title: number
    description: number
    createdById: number
    createdAt: number
    _all: number
  }


  export type JobMinAggregateInputType = {
    id?: true
    tenantId?: true
    title?: true
    description?: true
    createdById?: true
    createdAt?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    tenantId?: true
    title?: true
    description?: true
    createdById?: true
    createdAt?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    tenantId?: true
    title?: true
    description?: true
    createdById?: true
    createdAt?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: string
    tenantId: string
    title: string
    description: string
    createdById: string
    createdAt: Date
    _count: JobCountAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    title?: boolean
    description?: boolean
    createdById?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    jobVectors?: boolean | Job$jobVectorsArgs<ExtArgs>
    matches?: boolean | Job$matchesArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    title?: boolean
    description?: boolean
    createdById?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    title?: boolean
    description?: boolean
    createdById?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    tenantId?: boolean
    title?: boolean
    description?: boolean
    createdById?: boolean
    createdAt?: boolean
  }

  export type JobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "title" | "description" | "createdById" | "createdAt", ExtArgs["result"]["job"]>
  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    jobVectors?: boolean | Job$jobVectorsArgs<ExtArgs>
    matches?: boolean | Job$matchesArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type JobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      jobVectors: Prisma.$JobVectorPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      title: string
      description: string
      createdById: string
      createdAt: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs and returns the data updated in the database.
     * @param {JobUpdateManyAndReturnArgs} args - Arguments to update many Jobs.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobUpdateManyAndReturnArgs>(args: SelectSubset<T, JobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    jobVectors<T extends Job$jobVectorsArgs<ExtArgs> = {}>(args?: Subset<T, Job$jobVectorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matches<T extends Job$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Job$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'String'>
    readonly tenantId: FieldRef<"Job", 'String'>
    readonly title: FieldRef<"Job", 'String'>
    readonly description: FieldRef<"Job", 'String'>
    readonly createdById: FieldRef<"Job", 'String'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job updateManyAndReturn
   */
  export type JobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to delete.
     */
    limit?: number
  }

  /**
   * Job.jobVectors
   */
  export type Job$jobVectorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    where?: JobVectorWhereInput
    orderBy?: JobVectorOrderByWithRelationInput | JobVectorOrderByWithRelationInput[]
    cursor?: JobVectorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobVectorScalarFieldEnum | JobVectorScalarFieldEnum[]
  }

  /**
   * Job.matches
   */
  export type Job$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model Candidate
   */

  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
  }

  export type CandidateMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
  }

  export type CandidateCountAggregateOutputType = {
    id: number
    tenantId: number
    name: number
    email: number
    phone: number
    createdAt: number
    _all: number
  }


  export type CandidateMinAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
  }

  export type CandidateMaxAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
  }

  export type CandidateCountAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    _all?: true
  }

  export type CandidateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate to aggregate.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithAggregationInput | CandidateOrderByWithAggregationInput[]
    by: CandidateScalarFieldEnum[] | CandidateScalarFieldEnum
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }

  export type CandidateGroupByOutputType = {
    id: string
    tenantId: string
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date
    _count: CandidateCountAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    cvs?: boolean | Candidate$cvsArgs<ExtArgs>
    texts?: boolean | Candidate$textsArgs<ExtArgs>
    matches?: boolean | Candidate$matchesArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectScalar = {
    id?: boolean
    tenantId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
  }

  export type CandidateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "name" | "email" | "phone" | "createdAt", ExtArgs["result"]["candidate"]>
  export type CandidateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    cvs?: boolean | Candidate$cvsArgs<ExtArgs>
    texts?: boolean | Candidate$textsArgs<ExtArgs>
    matches?: boolean | Candidate$matchesArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CandidateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type CandidateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CandidatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      cvs: Prisma.$CvFilePayload<ExtArgs>[]
      texts: Prisma.$CandidateTextPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      name: string | null
      email: string | null
      phone: string | null
      createdAt: Date
    }, ExtArgs["result"]["candidate"]>
    composites: {}
  }

  type CandidateGetPayload<S extends boolean | null | undefined | CandidateDefaultArgs> = $Result.GetResult<Prisma.$CandidatePayload, S>

  type CandidateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateCountAggregateInputType | true
    }

  export interface CandidateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate'], meta: { name: 'Candidate' } }
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateFindUniqueArgs>(args: SelectSubset<T, CandidateFindUniqueArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Candidate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateFindUniqueOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateFindFirstArgs>(args?: SelectSubset<T, CandidateFindFirstArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateWithIdOnly = await prisma.candidate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateFindManyArgs>(args?: SelectSubset<T, CandidateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
     */
    create<T extends CandidateCreateArgs>(args: SelectSubset<T, CandidateCreateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Candidates.
     * @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateCreateManyArgs>(args?: SelectSubset<T, CandidateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Candidates and returns the data saved in the database.
     * @param {CandidateCreateManyAndReturnArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
     */
    delete<T extends CandidateDeleteArgs>(args: SelectSubset<T, CandidateDeleteArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateUpdateArgs>(args: SelectSubset<T, CandidateUpdateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateDeleteManyArgs>(args?: SelectSubset<T, CandidateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateUpdateManyArgs>(args: SelectSubset<T, CandidateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates and returns the data updated in the database.
     * @param {CandidateUpdateManyAndReturnArgs} args - Arguments to update many Candidates.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
     */
    upsert<T extends CandidateUpsertArgs>(args: SelectSubset<T, CandidateUpsertArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): Prisma.PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate model
   */
  readonly fields: CandidateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cvs<T extends Candidate$cvsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$cvsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    texts<T extends Candidate$textsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$textsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matches<T extends Candidate$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Candidate model
   */
  interface CandidateFieldRefs {
    readonly id: FieldRef<"Candidate", 'String'>
    readonly tenantId: FieldRef<"Candidate", 'String'>
    readonly name: FieldRef<"Candidate", 'String'>
    readonly email: FieldRef<"Candidate", 'String'>
    readonly phone: FieldRef<"Candidate", 'String'>
    readonly createdAt: FieldRef<"Candidate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findUniqueOrThrow
   */
  export type CandidateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findFirstOrThrow
   */
  export type CandidateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidates to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate create
   */
  export type CandidateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate.
     */
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }

  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidate createManyAndReturn
   */
  export type CandidateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Candidate update
   */
  export type CandidateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate.
     */
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to update.
     */
    limit?: number
  }

  /**
   * Candidate updateManyAndReturn
   */
  export type CandidateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     */
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     */
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }

  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter which Candidate to delete.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidates to delete
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to delete.
     */
    limit?: number
  }

  /**
   * Candidate.cvs
   */
  export type Candidate$cvsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    where?: CvFileWhereInput
    orderBy?: CvFileOrderByWithRelationInput | CvFileOrderByWithRelationInput[]
    cursor?: CvFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CvFileScalarFieldEnum | CvFileScalarFieldEnum[]
  }

  /**
   * Candidate.texts
   */
  export type Candidate$textsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    where?: CandidateTextWhereInput
    orderBy?: CandidateTextOrderByWithRelationInput | CandidateTextOrderByWithRelationInput[]
    cursor?: CandidateTextWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateTextScalarFieldEnum | CandidateTextScalarFieldEnum[]
  }

  /**
   * Candidate.matches
   */
  export type Candidate$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Candidate without action
   */
  export type CandidateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
  }


  /**
   * Model CvFile
   */

  export type AggregateCvFile = {
    _count: CvFileCountAggregateOutputType | null
    _avg: CvFileAvgAggregateOutputType | null
    _sum: CvFileSumAggregateOutputType | null
    _min: CvFileMinAggregateOutputType | null
    _max: CvFileMaxAggregateOutputType | null
  }

  export type CvFileAvgAggregateOutputType = {
    size: number | null
  }

  export type CvFileSumAggregateOutputType = {
    size: number | null
  }

  export type CvFileMinAggregateOutputType = {
    id: string | null
    candidateId: string | null
    s3_key: string | null
    file_name: string | null
    content_type: string | null
    size: number | null
    status: $Enums.CvStatus | null
    createdAt: Date | null
  }

  export type CvFileMaxAggregateOutputType = {
    id: string | null
    candidateId: string | null
    s3_key: string | null
    file_name: string | null
    content_type: string | null
    size: number | null
    status: $Enums.CvStatus | null
    createdAt: Date | null
  }

  export type CvFileCountAggregateOutputType = {
    id: number
    candidateId: number
    s3_key: number
    file_name: number
    content_type: number
    size: number
    status: number
    createdAt: number
    _all: number
  }


  export type CvFileAvgAggregateInputType = {
    size?: true
  }

  export type CvFileSumAggregateInputType = {
    size?: true
  }

  export type CvFileMinAggregateInputType = {
    id?: true
    candidateId?: true
    s3_key?: true
    file_name?: true
    content_type?: true
    size?: true
    status?: true
    createdAt?: true
  }

  export type CvFileMaxAggregateInputType = {
    id?: true
    candidateId?: true
    s3_key?: true
    file_name?: true
    content_type?: true
    size?: true
    status?: true
    createdAt?: true
  }

  export type CvFileCountAggregateInputType = {
    id?: true
    candidateId?: true
    s3_key?: true
    file_name?: true
    content_type?: true
    size?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type CvFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CvFile to aggregate.
     */
    where?: CvFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CvFiles to fetch.
     */
    orderBy?: CvFileOrderByWithRelationInput | CvFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CvFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CvFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CvFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CvFiles
    **/
    _count?: true | CvFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CvFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CvFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CvFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CvFileMaxAggregateInputType
  }

  export type GetCvFileAggregateType<T extends CvFileAggregateArgs> = {
        [P in keyof T & keyof AggregateCvFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCvFile[P]>
      : GetScalarType<T[P], AggregateCvFile[P]>
  }




  export type CvFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CvFileWhereInput
    orderBy?: CvFileOrderByWithAggregationInput | CvFileOrderByWithAggregationInput[]
    by: CvFileScalarFieldEnum[] | CvFileScalarFieldEnum
    having?: CvFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CvFileCountAggregateInputType | true
    _avg?: CvFileAvgAggregateInputType
    _sum?: CvFileSumAggregateInputType
    _min?: CvFileMinAggregateInputType
    _max?: CvFileMaxAggregateInputType
  }

  export type CvFileGroupByOutputType = {
    id: string
    candidateId: string
    s3_key: string
    file_name: string
    content_type: string
    size: number
    status: $Enums.CvStatus
    createdAt: Date
    _count: CvFileCountAggregateOutputType | null
    _avg: CvFileAvgAggregateOutputType | null
    _sum: CvFileSumAggregateOutputType | null
    _min: CvFileMinAggregateOutputType | null
    _max: CvFileMaxAggregateOutputType | null
  }

  type GetCvFileGroupByPayload<T extends CvFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CvFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CvFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CvFileGroupByOutputType[P]>
            : GetScalarType<T[P], CvFileGroupByOutputType[P]>
        }
      >
    >


  export type CvFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    s3_key?: boolean
    file_name?: boolean
    content_type?: boolean
    size?: boolean
    status?: boolean
    createdAt?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cvFile"]>

  export type CvFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    s3_key?: boolean
    file_name?: boolean
    content_type?: boolean
    size?: boolean
    status?: boolean
    createdAt?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cvFile"]>

  export type CvFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    s3_key?: boolean
    file_name?: boolean
    content_type?: boolean
    size?: boolean
    status?: boolean
    createdAt?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cvFile"]>

  export type CvFileSelectScalar = {
    id?: boolean
    candidateId?: boolean
    s3_key?: boolean
    file_name?: boolean
    content_type?: boolean
    size?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type CvFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "candidateId" | "s3_key" | "file_name" | "content_type" | "size" | "status" | "createdAt", ExtArgs["result"]["cvFile"]>
  export type CvFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CvFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CvFileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $CvFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CvFile"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      candidateId: string
      s3_key: string
      file_name: string
      content_type: string
      size: number
      status: $Enums.CvStatus
      createdAt: Date
    }, ExtArgs["result"]["cvFile"]>
    composites: {}
  }

  type CvFileGetPayload<S extends boolean | null | undefined | CvFileDefaultArgs> = $Result.GetResult<Prisma.$CvFilePayload, S>

  type CvFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CvFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CvFileCountAggregateInputType | true
    }

  export interface CvFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CvFile'], meta: { name: 'CvFile' } }
    /**
     * Find zero or one CvFile that matches the filter.
     * @param {CvFileFindUniqueArgs} args - Arguments to find a CvFile
     * @example
     * // Get one CvFile
     * const cvFile = await prisma.cvFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CvFileFindUniqueArgs>(args: SelectSubset<T, CvFileFindUniqueArgs<ExtArgs>>): Prisma__CvFileClient<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CvFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CvFileFindUniqueOrThrowArgs} args - Arguments to find a CvFile
     * @example
     * // Get one CvFile
     * const cvFile = await prisma.cvFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CvFileFindUniqueOrThrowArgs>(args: SelectSubset<T, CvFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CvFileClient<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CvFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CvFileFindFirstArgs} args - Arguments to find a CvFile
     * @example
     * // Get one CvFile
     * const cvFile = await prisma.cvFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CvFileFindFirstArgs>(args?: SelectSubset<T, CvFileFindFirstArgs<ExtArgs>>): Prisma__CvFileClient<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CvFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CvFileFindFirstOrThrowArgs} args - Arguments to find a CvFile
     * @example
     * // Get one CvFile
     * const cvFile = await prisma.cvFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CvFileFindFirstOrThrowArgs>(args?: SelectSubset<T, CvFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__CvFileClient<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CvFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CvFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CvFiles
     * const cvFiles = await prisma.cvFile.findMany()
     * 
     * // Get first 10 CvFiles
     * const cvFiles = await prisma.cvFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cvFileWithIdOnly = await prisma.cvFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CvFileFindManyArgs>(args?: SelectSubset<T, CvFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CvFile.
     * @param {CvFileCreateArgs} args - Arguments to create a CvFile.
     * @example
     * // Create one CvFile
     * const CvFile = await prisma.cvFile.create({
     *   data: {
     *     // ... data to create a CvFile
     *   }
     * })
     * 
     */
    create<T extends CvFileCreateArgs>(args: SelectSubset<T, CvFileCreateArgs<ExtArgs>>): Prisma__CvFileClient<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CvFiles.
     * @param {CvFileCreateManyArgs} args - Arguments to create many CvFiles.
     * @example
     * // Create many CvFiles
     * const cvFile = await prisma.cvFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CvFileCreateManyArgs>(args?: SelectSubset<T, CvFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CvFiles and returns the data saved in the database.
     * @param {CvFileCreateManyAndReturnArgs} args - Arguments to create many CvFiles.
     * @example
     * // Create many CvFiles
     * const cvFile = await prisma.cvFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CvFiles and only return the `id`
     * const cvFileWithIdOnly = await prisma.cvFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CvFileCreateManyAndReturnArgs>(args?: SelectSubset<T, CvFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CvFile.
     * @param {CvFileDeleteArgs} args - Arguments to delete one CvFile.
     * @example
     * // Delete one CvFile
     * const CvFile = await prisma.cvFile.delete({
     *   where: {
     *     // ... filter to delete one CvFile
     *   }
     * })
     * 
     */
    delete<T extends CvFileDeleteArgs>(args: SelectSubset<T, CvFileDeleteArgs<ExtArgs>>): Prisma__CvFileClient<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CvFile.
     * @param {CvFileUpdateArgs} args - Arguments to update one CvFile.
     * @example
     * // Update one CvFile
     * const cvFile = await prisma.cvFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CvFileUpdateArgs>(args: SelectSubset<T, CvFileUpdateArgs<ExtArgs>>): Prisma__CvFileClient<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CvFiles.
     * @param {CvFileDeleteManyArgs} args - Arguments to filter CvFiles to delete.
     * @example
     * // Delete a few CvFiles
     * const { count } = await prisma.cvFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CvFileDeleteManyArgs>(args?: SelectSubset<T, CvFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CvFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CvFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CvFiles
     * const cvFile = await prisma.cvFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CvFileUpdateManyArgs>(args: SelectSubset<T, CvFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CvFiles and returns the data updated in the database.
     * @param {CvFileUpdateManyAndReturnArgs} args - Arguments to update many CvFiles.
     * @example
     * // Update many CvFiles
     * const cvFile = await prisma.cvFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CvFiles and only return the `id`
     * const cvFileWithIdOnly = await prisma.cvFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CvFileUpdateManyAndReturnArgs>(args: SelectSubset<T, CvFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CvFile.
     * @param {CvFileUpsertArgs} args - Arguments to update or create a CvFile.
     * @example
     * // Update or create a CvFile
     * const cvFile = await prisma.cvFile.upsert({
     *   create: {
     *     // ... data to create a CvFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CvFile we want to update
     *   }
     * })
     */
    upsert<T extends CvFileUpsertArgs>(args: SelectSubset<T, CvFileUpsertArgs<ExtArgs>>): Prisma__CvFileClient<$Result.GetResult<Prisma.$CvFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CvFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CvFileCountArgs} args - Arguments to filter CvFiles to count.
     * @example
     * // Count the number of CvFiles
     * const count = await prisma.cvFile.count({
     *   where: {
     *     // ... the filter for the CvFiles we want to count
     *   }
     * })
    **/
    count<T extends CvFileCountArgs>(
      args?: Subset<T, CvFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CvFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CvFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CvFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CvFileAggregateArgs>(args: Subset<T, CvFileAggregateArgs>): Prisma.PrismaPromise<GetCvFileAggregateType<T>>

    /**
     * Group by CvFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CvFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CvFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CvFileGroupByArgs['orderBy'] }
        : { orderBy?: CvFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CvFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCvFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CvFile model
   */
  readonly fields: CvFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CvFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CvFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CvFile model
   */
  interface CvFileFieldRefs {
    readonly id: FieldRef<"CvFile", 'String'>
    readonly candidateId: FieldRef<"CvFile", 'String'>
    readonly s3_key: FieldRef<"CvFile", 'String'>
    readonly file_name: FieldRef<"CvFile", 'String'>
    readonly content_type: FieldRef<"CvFile", 'String'>
    readonly size: FieldRef<"CvFile", 'Int'>
    readonly status: FieldRef<"CvFile", 'CvStatus'>
    readonly createdAt: FieldRef<"CvFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CvFile findUnique
   */
  export type CvFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * Filter, which CvFile to fetch.
     */
    where: CvFileWhereUniqueInput
  }

  /**
   * CvFile findUniqueOrThrow
   */
  export type CvFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * Filter, which CvFile to fetch.
     */
    where: CvFileWhereUniqueInput
  }

  /**
   * CvFile findFirst
   */
  export type CvFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * Filter, which CvFile to fetch.
     */
    where?: CvFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CvFiles to fetch.
     */
    orderBy?: CvFileOrderByWithRelationInput | CvFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CvFiles.
     */
    cursor?: CvFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CvFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CvFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CvFiles.
     */
    distinct?: CvFileScalarFieldEnum | CvFileScalarFieldEnum[]
  }

  /**
   * CvFile findFirstOrThrow
   */
  export type CvFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * Filter, which CvFile to fetch.
     */
    where?: CvFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CvFiles to fetch.
     */
    orderBy?: CvFileOrderByWithRelationInput | CvFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CvFiles.
     */
    cursor?: CvFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CvFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CvFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CvFiles.
     */
    distinct?: CvFileScalarFieldEnum | CvFileScalarFieldEnum[]
  }

  /**
   * CvFile findMany
   */
  export type CvFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * Filter, which CvFiles to fetch.
     */
    where?: CvFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CvFiles to fetch.
     */
    orderBy?: CvFileOrderByWithRelationInput | CvFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CvFiles.
     */
    cursor?: CvFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CvFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CvFiles.
     */
    skip?: number
    distinct?: CvFileScalarFieldEnum | CvFileScalarFieldEnum[]
  }

  /**
   * CvFile create
   */
  export type CvFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * The data needed to create a CvFile.
     */
    data: XOR<CvFileCreateInput, CvFileUncheckedCreateInput>
  }

  /**
   * CvFile createMany
   */
  export type CvFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CvFiles.
     */
    data: CvFileCreateManyInput | CvFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CvFile createManyAndReturn
   */
  export type CvFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * The data used to create many CvFiles.
     */
    data: CvFileCreateManyInput | CvFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CvFile update
   */
  export type CvFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * The data needed to update a CvFile.
     */
    data: XOR<CvFileUpdateInput, CvFileUncheckedUpdateInput>
    /**
     * Choose, which CvFile to update.
     */
    where: CvFileWhereUniqueInput
  }

  /**
   * CvFile updateMany
   */
  export type CvFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CvFiles.
     */
    data: XOR<CvFileUpdateManyMutationInput, CvFileUncheckedUpdateManyInput>
    /**
     * Filter which CvFiles to update
     */
    where?: CvFileWhereInput
    /**
     * Limit how many CvFiles to update.
     */
    limit?: number
  }

  /**
   * CvFile updateManyAndReturn
   */
  export type CvFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * The data used to update CvFiles.
     */
    data: XOR<CvFileUpdateManyMutationInput, CvFileUncheckedUpdateManyInput>
    /**
     * Filter which CvFiles to update
     */
    where?: CvFileWhereInput
    /**
     * Limit how many CvFiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CvFile upsert
   */
  export type CvFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * The filter to search for the CvFile to update in case it exists.
     */
    where: CvFileWhereUniqueInput
    /**
     * In case the CvFile found by the `where` argument doesn't exist, create a new CvFile with this data.
     */
    create: XOR<CvFileCreateInput, CvFileUncheckedCreateInput>
    /**
     * In case the CvFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CvFileUpdateInput, CvFileUncheckedUpdateInput>
  }

  /**
   * CvFile delete
   */
  export type CvFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
    /**
     * Filter which CvFile to delete.
     */
    where: CvFileWhereUniqueInput
  }

  /**
   * CvFile deleteMany
   */
  export type CvFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CvFiles to delete
     */
    where?: CvFileWhereInput
    /**
     * Limit how many CvFiles to delete.
     */
    limit?: number
  }

  /**
   * CvFile without action
   */
  export type CvFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CvFile
     */
    select?: CvFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CvFile
     */
    omit?: CvFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CvFileInclude<ExtArgs> | null
  }


  /**
   * Model CandidateText
   */

  export type AggregateCandidateText = {
    _count: CandidateTextCountAggregateOutputType | null
    _min: CandidateTextMinAggregateOutputType | null
    _max: CandidateTextMaxAggregateOutputType | null
  }

  export type CandidateTextMinAggregateOutputType = {
    id: string | null
    candidateId: string | null
    text: string | null
  }

  export type CandidateTextMaxAggregateOutputType = {
    id: string | null
    candidateId: string | null
    text: string | null
  }

  export type CandidateTextCountAggregateOutputType = {
    id: number
    candidateId: number
    text: number
    _all: number
  }


  export type CandidateTextMinAggregateInputType = {
    id?: true
    candidateId?: true
    text?: true
  }

  export type CandidateTextMaxAggregateInputType = {
    id?: true
    candidateId?: true
    text?: true
  }

  export type CandidateTextCountAggregateInputType = {
    id?: true
    candidateId?: true
    text?: true
    _all?: true
  }

  export type CandidateTextAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateText to aggregate.
     */
    where?: CandidateTextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateTexts to fetch.
     */
    orderBy?: CandidateTextOrderByWithRelationInput | CandidateTextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateTextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateTexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateTexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidateTexts
    **/
    _count?: true | CandidateTextCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateTextMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateTextMaxAggregateInputType
  }

  export type GetCandidateTextAggregateType<T extends CandidateTextAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidateText]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidateText[P]>
      : GetScalarType<T[P], AggregateCandidateText[P]>
  }




  export type CandidateTextGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateTextWhereInput
    orderBy?: CandidateTextOrderByWithAggregationInput | CandidateTextOrderByWithAggregationInput[]
    by: CandidateTextScalarFieldEnum[] | CandidateTextScalarFieldEnum
    having?: CandidateTextScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateTextCountAggregateInputType | true
    _min?: CandidateTextMinAggregateInputType
    _max?: CandidateTextMaxAggregateInputType
  }

  export type CandidateTextGroupByOutputType = {
    id: string
    candidateId: string
    text: string
    _count: CandidateTextCountAggregateOutputType | null
    _min: CandidateTextMinAggregateOutputType | null
    _max: CandidateTextMaxAggregateOutputType | null
  }

  type GetCandidateTextGroupByPayload<T extends CandidateTextGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateTextGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateTextGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateTextGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateTextGroupByOutputType[P]>
        }
      >
    >


  export type CandidateTextSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    text?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateText"]>

  export type CandidateTextSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    text?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateText"]>

  export type CandidateTextSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    text?: boolean
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateText"]>

  export type CandidateTextSelectScalar = {
    id?: boolean
    candidateId?: boolean
    text?: boolean
  }

  export type CandidateTextOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "candidateId" | "text", ExtArgs["result"]["candidateText"]>
  export type CandidateTextInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CandidateTextIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CandidateTextIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $CandidateTextPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidateText"
    objects: {
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      candidateId: string
      text: string
    }, ExtArgs["result"]["candidateText"]>
    composites: {}
  }

  type CandidateTextGetPayload<S extends boolean | null | undefined | CandidateTextDefaultArgs> = $Result.GetResult<Prisma.$CandidateTextPayload, S>

  type CandidateTextCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateTextFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateTextCountAggregateInputType | true
    }

  export interface CandidateTextDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidateText'], meta: { name: 'CandidateText' } }
    /**
     * Find zero or one CandidateText that matches the filter.
     * @param {CandidateTextFindUniqueArgs} args - Arguments to find a CandidateText
     * @example
     * // Get one CandidateText
     * const candidateText = await prisma.candidateText.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateTextFindUniqueArgs>(args: SelectSubset<T, CandidateTextFindUniqueArgs<ExtArgs>>): Prisma__CandidateTextClient<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CandidateText that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateTextFindUniqueOrThrowArgs} args - Arguments to find a CandidateText
     * @example
     * // Get one CandidateText
     * const candidateText = await prisma.candidateText.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateTextFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateTextFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateTextClient<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateText that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateTextFindFirstArgs} args - Arguments to find a CandidateText
     * @example
     * // Get one CandidateText
     * const candidateText = await prisma.candidateText.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateTextFindFirstArgs>(args?: SelectSubset<T, CandidateTextFindFirstArgs<ExtArgs>>): Prisma__CandidateTextClient<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateText that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateTextFindFirstOrThrowArgs} args - Arguments to find a CandidateText
     * @example
     * // Get one CandidateText
     * const candidateText = await prisma.candidateText.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateTextFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateTextFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateTextClient<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CandidateTexts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateTextFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidateTexts
     * const candidateTexts = await prisma.candidateText.findMany()
     * 
     * // Get first 10 CandidateTexts
     * const candidateTexts = await prisma.candidateText.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateTextWithIdOnly = await prisma.candidateText.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateTextFindManyArgs>(args?: SelectSubset<T, CandidateTextFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CandidateText.
     * @param {CandidateTextCreateArgs} args - Arguments to create a CandidateText.
     * @example
     * // Create one CandidateText
     * const CandidateText = await prisma.candidateText.create({
     *   data: {
     *     // ... data to create a CandidateText
     *   }
     * })
     * 
     */
    create<T extends CandidateTextCreateArgs>(args: SelectSubset<T, CandidateTextCreateArgs<ExtArgs>>): Prisma__CandidateTextClient<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CandidateTexts.
     * @param {CandidateTextCreateManyArgs} args - Arguments to create many CandidateTexts.
     * @example
     * // Create many CandidateTexts
     * const candidateText = await prisma.candidateText.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateTextCreateManyArgs>(args?: SelectSubset<T, CandidateTextCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidateTexts and returns the data saved in the database.
     * @param {CandidateTextCreateManyAndReturnArgs} args - Arguments to create many CandidateTexts.
     * @example
     * // Create many CandidateTexts
     * const candidateText = await prisma.candidateText.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidateTexts and only return the `id`
     * const candidateTextWithIdOnly = await prisma.candidateText.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateTextCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateTextCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CandidateText.
     * @param {CandidateTextDeleteArgs} args - Arguments to delete one CandidateText.
     * @example
     * // Delete one CandidateText
     * const CandidateText = await prisma.candidateText.delete({
     *   where: {
     *     // ... filter to delete one CandidateText
     *   }
     * })
     * 
     */
    delete<T extends CandidateTextDeleteArgs>(args: SelectSubset<T, CandidateTextDeleteArgs<ExtArgs>>): Prisma__CandidateTextClient<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CandidateText.
     * @param {CandidateTextUpdateArgs} args - Arguments to update one CandidateText.
     * @example
     * // Update one CandidateText
     * const candidateText = await prisma.candidateText.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateTextUpdateArgs>(args: SelectSubset<T, CandidateTextUpdateArgs<ExtArgs>>): Prisma__CandidateTextClient<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CandidateTexts.
     * @param {CandidateTextDeleteManyArgs} args - Arguments to filter CandidateTexts to delete.
     * @example
     * // Delete a few CandidateTexts
     * const { count } = await prisma.candidateText.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateTextDeleteManyArgs>(args?: SelectSubset<T, CandidateTextDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateTexts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateTextUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidateTexts
     * const candidateText = await prisma.candidateText.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateTextUpdateManyArgs>(args: SelectSubset<T, CandidateTextUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateTexts and returns the data updated in the database.
     * @param {CandidateTextUpdateManyAndReturnArgs} args - Arguments to update many CandidateTexts.
     * @example
     * // Update many CandidateTexts
     * const candidateText = await prisma.candidateText.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CandidateTexts and only return the `id`
     * const candidateTextWithIdOnly = await prisma.candidateText.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateTextUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateTextUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CandidateText.
     * @param {CandidateTextUpsertArgs} args - Arguments to update or create a CandidateText.
     * @example
     * // Update or create a CandidateText
     * const candidateText = await prisma.candidateText.upsert({
     *   create: {
     *     // ... data to create a CandidateText
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidateText we want to update
     *   }
     * })
     */
    upsert<T extends CandidateTextUpsertArgs>(args: SelectSubset<T, CandidateTextUpsertArgs<ExtArgs>>): Prisma__CandidateTextClient<$Result.GetResult<Prisma.$CandidateTextPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CandidateTexts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateTextCountArgs} args - Arguments to filter CandidateTexts to count.
     * @example
     * // Count the number of CandidateTexts
     * const count = await prisma.candidateText.count({
     *   where: {
     *     // ... the filter for the CandidateTexts we want to count
     *   }
     * })
    **/
    count<T extends CandidateTextCountArgs>(
      args?: Subset<T, CandidateTextCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateTextCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidateText.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateTextAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateTextAggregateArgs>(args: Subset<T, CandidateTextAggregateArgs>): Prisma.PrismaPromise<GetCandidateTextAggregateType<T>>

    /**
     * Group by CandidateText.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateTextGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateTextGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateTextGroupByArgs['orderBy'] }
        : { orderBy?: CandidateTextGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateTextGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateTextGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidateText model
   */
  readonly fields: CandidateTextFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidateText.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateTextClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidateText model
   */
  interface CandidateTextFieldRefs {
    readonly id: FieldRef<"CandidateText", 'String'>
    readonly candidateId: FieldRef<"CandidateText", 'String'>
    readonly text: FieldRef<"CandidateText", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CandidateText findUnique
   */
  export type CandidateTextFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * Filter, which CandidateText to fetch.
     */
    where: CandidateTextWhereUniqueInput
  }

  /**
   * CandidateText findUniqueOrThrow
   */
  export type CandidateTextFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * Filter, which CandidateText to fetch.
     */
    where: CandidateTextWhereUniqueInput
  }

  /**
   * CandidateText findFirst
   */
  export type CandidateTextFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * Filter, which CandidateText to fetch.
     */
    where?: CandidateTextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateTexts to fetch.
     */
    orderBy?: CandidateTextOrderByWithRelationInput | CandidateTextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateTexts.
     */
    cursor?: CandidateTextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateTexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateTexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateTexts.
     */
    distinct?: CandidateTextScalarFieldEnum | CandidateTextScalarFieldEnum[]
  }

  /**
   * CandidateText findFirstOrThrow
   */
  export type CandidateTextFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * Filter, which CandidateText to fetch.
     */
    where?: CandidateTextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateTexts to fetch.
     */
    orderBy?: CandidateTextOrderByWithRelationInput | CandidateTextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateTexts.
     */
    cursor?: CandidateTextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateTexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateTexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateTexts.
     */
    distinct?: CandidateTextScalarFieldEnum | CandidateTextScalarFieldEnum[]
  }

  /**
   * CandidateText findMany
   */
  export type CandidateTextFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * Filter, which CandidateTexts to fetch.
     */
    where?: CandidateTextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateTexts to fetch.
     */
    orderBy?: CandidateTextOrderByWithRelationInput | CandidateTextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidateTexts.
     */
    cursor?: CandidateTextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateTexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateTexts.
     */
    skip?: number
    distinct?: CandidateTextScalarFieldEnum | CandidateTextScalarFieldEnum[]
  }

  /**
   * CandidateText create
   */
  export type CandidateTextCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidateText.
     */
    data: XOR<CandidateTextCreateInput, CandidateTextUncheckedCreateInput>
  }

  /**
   * CandidateText createMany
   */
  export type CandidateTextCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidateTexts.
     */
    data: CandidateTextCreateManyInput | CandidateTextCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CandidateText createManyAndReturn
   */
  export type CandidateTextCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * The data used to create many CandidateTexts.
     */
    data: CandidateTextCreateManyInput | CandidateTextCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateText update
   */
  export type CandidateTextUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidateText.
     */
    data: XOR<CandidateTextUpdateInput, CandidateTextUncheckedUpdateInput>
    /**
     * Choose, which CandidateText to update.
     */
    where: CandidateTextWhereUniqueInput
  }

  /**
   * CandidateText updateMany
   */
  export type CandidateTextUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidateTexts.
     */
    data: XOR<CandidateTextUpdateManyMutationInput, CandidateTextUncheckedUpdateManyInput>
    /**
     * Filter which CandidateTexts to update
     */
    where?: CandidateTextWhereInput
    /**
     * Limit how many CandidateTexts to update.
     */
    limit?: number
  }

  /**
   * CandidateText updateManyAndReturn
   */
  export type CandidateTextUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * The data used to update CandidateTexts.
     */
    data: XOR<CandidateTextUpdateManyMutationInput, CandidateTextUncheckedUpdateManyInput>
    /**
     * Filter which CandidateTexts to update
     */
    where?: CandidateTextWhereInput
    /**
     * Limit how many CandidateTexts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateText upsert
   */
  export type CandidateTextUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidateText to update in case it exists.
     */
    where: CandidateTextWhereUniqueInput
    /**
     * In case the CandidateText found by the `where` argument doesn't exist, create a new CandidateText with this data.
     */
    create: XOR<CandidateTextCreateInput, CandidateTextUncheckedCreateInput>
    /**
     * In case the CandidateText was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateTextUpdateInput, CandidateTextUncheckedUpdateInput>
  }

  /**
   * CandidateText delete
   */
  export type CandidateTextDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
    /**
     * Filter which CandidateText to delete.
     */
    where: CandidateTextWhereUniqueInput
  }

  /**
   * CandidateText deleteMany
   */
  export type CandidateTextDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateTexts to delete
     */
    where?: CandidateTextWhereInput
    /**
     * Limit how many CandidateTexts to delete.
     */
    limit?: number
  }

  /**
   * CandidateText without action
   */
  export type CandidateTextDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateText
     */
    select?: CandidateTextSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateText
     */
    omit?: CandidateTextOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateTextInclude<ExtArgs> | null
  }


  /**
   * Model Vector
   */

  export type AggregateVector = {
    _count: VectorCountAggregateOutputType | null
    _min: VectorMinAggregateOutputType | null
    _max: VectorMaxAggregateOutputType | null
  }

  export type VectorMinAggregateOutputType = {
    id: string | null
    candidateTextId: string | null
    candidateId: string | null
    embedding: Uint8Array | null
  }

  export type VectorMaxAggregateOutputType = {
    id: string | null
    candidateTextId: string | null
    candidateId: string | null
    embedding: Uint8Array | null
  }

  export type VectorCountAggregateOutputType = {
    id: number
    candidateTextId: number
    candidateId: number
    embedding: number
    _all: number
  }


  export type VectorMinAggregateInputType = {
    id?: true
    candidateTextId?: true
    candidateId?: true
    embedding?: true
  }

  export type VectorMaxAggregateInputType = {
    id?: true
    candidateTextId?: true
    candidateId?: true
    embedding?: true
  }

  export type VectorCountAggregateInputType = {
    id?: true
    candidateTextId?: true
    candidateId?: true
    embedding?: true
    _all?: true
  }

  export type VectorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vector to aggregate.
     */
    where?: VectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vectors to fetch.
     */
    orderBy?: VectorOrderByWithRelationInput | VectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vectors
    **/
    _count?: true | VectorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VectorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VectorMaxAggregateInputType
  }

  export type GetVectorAggregateType<T extends VectorAggregateArgs> = {
        [P in keyof T & keyof AggregateVector]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVector[P]>
      : GetScalarType<T[P], AggregateVector[P]>
  }




  export type VectorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VectorWhereInput
    orderBy?: VectorOrderByWithAggregationInput | VectorOrderByWithAggregationInput[]
    by: VectorScalarFieldEnum[] | VectorScalarFieldEnum
    having?: VectorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VectorCountAggregateInputType | true
    _min?: VectorMinAggregateInputType
    _max?: VectorMaxAggregateInputType
  }

  export type VectorGroupByOutputType = {
    id: string
    candidateTextId: string | null
    candidateId: string | null
    embedding: Uint8Array
    _count: VectorCountAggregateOutputType | null
    _min: VectorMinAggregateOutputType | null
    _max: VectorMaxAggregateOutputType | null
  }

  type GetVectorGroupByPayload<T extends VectorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VectorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VectorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VectorGroupByOutputType[P]>
            : GetScalarType<T[P], VectorGroupByOutputType[P]>
        }
      >
    >


  export type VectorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateTextId?: boolean
    candidateId?: boolean
    embedding?: boolean
  }, ExtArgs["result"]["vector"]>

  export type VectorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateTextId?: boolean
    candidateId?: boolean
    embedding?: boolean
  }, ExtArgs["result"]["vector"]>

  export type VectorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateTextId?: boolean
    candidateId?: boolean
    embedding?: boolean
  }, ExtArgs["result"]["vector"]>

  export type VectorSelectScalar = {
    id?: boolean
    candidateTextId?: boolean
    candidateId?: boolean
    embedding?: boolean
  }

  export type VectorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "candidateTextId" | "candidateId" | "embedding", ExtArgs["result"]["vector"]>

  export type $VectorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vector"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      candidateTextId: string | null
      candidateId: string | null
      embedding: Uint8Array
    }, ExtArgs["result"]["vector"]>
    composites: {}
  }

  type VectorGetPayload<S extends boolean | null | undefined | VectorDefaultArgs> = $Result.GetResult<Prisma.$VectorPayload, S>

  type VectorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VectorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VectorCountAggregateInputType | true
    }

  export interface VectorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vector'], meta: { name: 'Vector' } }
    /**
     * Find zero or one Vector that matches the filter.
     * @param {VectorFindUniqueArgs} args - Arguments to find a Vector
     * @example
     * // Get one Vector
     * const vector = await prisma.vector.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VectorFindUniqueArgs>(args: SelectSubset<T, VectorFindUniqueArgs<ExtArgs>>): Prisma__VectorClient<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vector that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VectorFindUniqueOrThrowArgs} args - Arguments to find a Vector
     * @example
     * // Get one Vector
     * const vector = await prisma.vector.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VectorFindUniqueOrThrowArgs>(args: SelectSubset<T, VectorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VectorClient<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vector that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorFindFirstArgs} args - Arguments to find a Vector
     * @example
     * // Get one Vector
     * const vector = await prisma.vector.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VectorFindFirstArgs>(args?: SelectSubset<T, VectorFindFirstArgs<ExtArgs>>): Prisma__VectorClient<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vector that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorFindFirstOrThrowArgs} args - Arguments to find a Vector
     * @example
     * // Get one Vector
     * const vector = await prisma.vector.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VectorFindFirstOrThrowArgs>(args?: SelectSubset<T, VectorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VectorClient<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vectors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vectors
     * const vectors = await prisma.vector.findMany()
     * 
     * // Get first 10 Vectors
     * const vectors = await prisma.vector.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vectorWithIdOnly = await prisma.vector.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VectorFindManyArgs>(args?: SelectSubset<T, VectorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vector.
     * @param {VectorCreateArgs} args - Arguments to create a Vector.
     * @example
     * // Create one Vector
     * const Vector = await prisma.vector.create({
     *   data: {
     *     // ... data to create a Vector
     *   }
     * })
     * 
     */
    create<T extends VectorCreateArgs>(args: SelectSubset<T, VectorCreateArgs<ExtArgs>>): Prisma__VectorClient<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vectors.
     * @param {VectorCreateManyArgs} args - Arguments to create many Vectors.
     * @example
     * // Create many Vectors
     * const vector = await prisma.vector.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VectorCreateManyArgs>(args?: SelectSubset<T, VectorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vectors and returns the data saved in the database.
     * @param {VectorCreateManyAndReturnArgs} args - Arguments to create many Vectors.
     * @example
     * // Create many Vectors
     * const vector = await prisma.vector.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vectors and only return the `id`
     * const vectorWithIdOnly = await prisma.vector.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VectorCreateManyAndReturnArgs>(args?: SelectSubset<T, VectorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vector.
     * @param {VectorDeleteArgs} args - Arguments to delete one Vector.
     * @example
     * // Delete one Vector
     * const Vector = await prisma.vector.delete({
     *   where: {
     *     // ... filter to delete one Vector
     *   }
     * })
     * 
     */
    delete<T extends VectorDeleteArgs>(args: SelectSubset<T, VectorDeleteArgs<ExtArgs>>): Prisma__VectorClient<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vector.
     * @param {VectorUpdateArgs} args - Arguments to update one Vector.
     * @example
     * // Update one Vector
     * const vector = await prisma.vector.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VectorUpdateArgs>(args: SelectSubset<T, VectorUpdateArgs<ExtArgs>>): Prisma__VectorClient<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vectors.
     * @param {VectorDeleteManyArgs} args - Arguments to filter Vectors to delete.
     * @example
     * // Delete a few Vectors
     * const { count } = await prisma.vector.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VectorDeleteManyArgs>(args?: SelectSubset<T, VectorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vectors
     * const vector = await prisma.vector.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VectorUpdateManyArgs>(args: SelectSubset<T, VectorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vectors and returns the data updated in the database.
     * @param {VectorUpdateManyAndReturnArgs} args - Arguments to update many Vectors.
     * @example
     * // Update many Vectors
     * const vector = await prisma.vector.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vectors and only return the `id`
     * const vectorWithIdOnly = await prisma.vector.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VectorUpdateManyAndReturnArgs>(args: SelectSubset<T, VectorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vector.
     * @param {VectorUpsertArgs} args - Arguments to update or create a Vector.
     * @example
     * // Update or create a Vector
     * const vector = await prisma.vector.upsert({
     *   create: {
     *     // ... data to create a Vector
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vector we want to update
     *   }
     * })
     */
    upsert<T extends VectorUpsertArgs>(args: SelectSubset<T, VectorUpsertArgs<ExtArgs>>): Prisma__VectorClient<$Result.GetResult<Prisma.$VectorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorCountArgs} args - Arguments to filter Vectors to count.
     * @example
     * // Count the number of Vectors
     * const count = await prisma.vector.count({
     *   where: {
     *     // ... the filter for the Vectors we want to count
     *   }
     * })
    **/
    count<T extends VectorCountArgs>(
      args?: Subset<T, VectorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VectorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vector.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VectorAggregateArgs>(args: Subset<T, VectorAggregateArgs>): Prisma.PrismaPromise<GetVectorAggregateType<T>>

    /**
     * Group by Vector.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VectorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VectorGroupByArgs['orderBy'] }
        : { orderBy?: VectorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VectorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVectorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vector model
   */
  readonly fields: VectorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vector.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VectorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vector model
   */
  interface VectorFieldRefs {
    readonly id: FieldRef<"Vector", 'String'>
    readonly candidateTextId: FieldRef<"Vector", 'String'>
    readonly candidateId: FieldRef<"Vector", 'String'>
    readonly embedding: FieldRef<"Vector", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * Vector findUnique
   */
  export type VectorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * Filter, which Vector to fetch.
     */
    where: VectorWhereUniqueInput
  }

  /**
   * Vector findUniqueOrThrow
   */
  export type VectorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * Filter, which Vector to fetch.
     */
    where: VectorWhereUniqueInput
  }

  /**
   * Vector findFirst
   */
  export type VectorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * Filter, which Vector to fetch.
     */
    where?: VectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vectors to fetch.
     */
    orderBy?: VectorOrderByWithRelationInput | VectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vectors.
     */
    cursor?: VectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vectors.
     */
    distinct?: VectorScalarFieldEnum | VectorScalarFieldEnum[]
  }

  /**
   * Vector findFirstOrThrow
   */
  export type VectorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * Filter, which Vector to fetch.
     */
    where?: VectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vectors to fetch.
     */
    orderBy?: VectorOrderByWithRelationInput | VectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vectors.
     */
    cursor?: VectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vectors.
     */
    distinct?: VectorScalarFieldEnum | VectorScalarFieldEnum[]
  }

  /**
   * Vector findMany
   */
  export type VectorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * Filter, which Vectors to fetch.
     */
    where?: VectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vectors to fetch.
     */
    orderBy?: VectorOrderByWithRelationInput | VectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vectors.
     */
    cursor?: VectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vectors.
     */
    skip?: number
    distinct?: VectorScalarFieldEnum | VectorScalarFieldEnum[]
  }

  /**
   * Vector create
   */
  export type VectorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * The data needed to create a Vector.
     */
    data: XOR<VectorCreateInput, VectorUncheckedCreateInput>
  }

  /**
   * Vector createMany
   */
  export type VectorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vectors.
     */
    data: VectorCreateManyInput | VectorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vector createManyAndReturn
   */
  export type VectorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * The data used to create many Vectors.
     */
    data: VectorCreateManyInput | VectorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vector update
   */
  export type VectorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * The data needed to update a Vector.
     */
    data: XOR<VectorUpdateInput, VectorUncheckedUpdateInput>
    /**
     * Choose, which Vector to update.
     */
    where: VectorWhereUniqueInput
  }

  /**
   * Vector updateMany
   */
  export type VectorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vectors.
     */
    data: XOR<VectorUpdateManyMutationInput, VectorUncheckedUpdateManyInput>
    /**
     * Filter which Vectors to update
     */
    where?: VectorWhereInput
    /**
     * Limit how many Vectors to update.
     */
    limit?: number
  }

  /**
   * Vector updateManyAndReturn
   */
  export type VectorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * The data used to update Vectors.
     */
    data: XOR<VectorUpdateManyMutationInput, VectorUncheckedUpdateManyInput>
    /**
     * Filter which Vectors to update
     */
    where?: VectorWhereInput
    /**
     * Limit how many Vectors to update.
     */
    limit?: number
  }

  /**
   * Vector upsert
   */
  export type VectorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * The filter to search for the Vector to update in case it exists.
     */
    where: VectorWhereUniqueInput
    /**
     * In case the Vector found by the `where` argument doesn't exist, create a new Vector with this data.
     */
    create: XOR<VectorCreateInput, VectorUncheckedCreateInput>
    /**
     * In case the Vector was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VectorUpdateInput, VectorUncheckedUpdateInput>
  }

  /**
   * Vector delete
   */
  export type VectorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
    /**
     * Filter which Vector to delete.
     */
    where: VectorWhereUniqueInput
  }

  /**
   * Vector deleteMany
   */
  export type VectorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vectors to delete
     */
    where?: VectorWhereInput
    /**
     * Limit how many Vectors to delete.
     */
    limit?: number
  }

  /**
   * Vector without action
   */
  export type VectorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vector
     */
    select?: VectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vector
     */
    omit?: VectorOmit<ExtArgs> | null
  }


  /**
   * Model JobVector
   */

  export type AggregateJobVector = {
    _count: JobVectorCountAggregateOutputType | null
    _min: JobVectorMinAggregateOutputType | null
    _max: JobVectorMaxAggregateOutputType | null
  }

  export type JobVectorMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    embedding: Uint8Array | null
  }

  export type JobVectorMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    embedding: Uint8Array | null
  }

  export type JobVectorCountAggregateOutputType = {
    id: number
    jobId: number
    embedding: number
    _all: number
  }


  export type JobVectorMinAggregateInputType = {
    id?: true
    jobId?: true
    embedding?: true
  }

  export type JobVectorMaxAggregateInputType = {
    id?: true
    jobId?: true
    embedding?: true
  }

  export type JobVectorCountAggregateInputType = {
    id?: true
    jobId?: true
    embedding?: true
    _all?: true
  }

  export type JobVectorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobVector to aggregate.
     */
    where?: JobVectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobVectors to fetch.
     */
    orderBy?: JobVectorOrderByWithRelationInput | JobVectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobVectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobVectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobVectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobVectors
    **/
    _count?: true | JobVectorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobVectorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobVectorMaxAggregateInputType
  }

  export type GetJobVectorAggregateType<T extends JobVectorAggregateArgs> = {
        [P in keyof T & keyof AggregateJobVector]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobVector[P]>
      : GetScalarType<T[P], AggregateJobVector[P]>
  }




  export type JobVectorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobVectorWhereInput
    orderBy?: JobVectorOrderByWithAggregationInput | JobVectorOrderByWithAggregationInput[]
    by: JobVectorScalarFieldEnum[] | JobVectorScalarFieldEnum
    having?: JobVectorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobVectorCountAggregateInputType | true
    _min?: JobVectorMinAggregateInputType
    _max?: JobVectorMaxAggregateInputType
  }

  export type JobVectorGroupByOutputType = {
    id: string
    jobId: string
    embedding: Uint8Array
    _count: JobVectorCountAggregateOutputType | null
    _min: JobVectorMinAggregateOutputType | null
    _max: JobVectorMaxAggregateOutputType | null
  }

  type GetJobVectorGroupByPayload<T extends JobVectorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobVectorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobVectorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobVectorGroupByOutputType[P]>
            : GetScalarType<T[P], JobVectorGroupByOutputType[P]>
        }
      >
    >


  export type JobVectorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    embedding?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobVector"]>

  export type JobVectorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    embedding?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobVector"]>

  export type JobVectorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    embedding?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobVector"]>

  export type JobVectorSelectScalar = {
    id?: boolean
    jobId?: boolean
    embedding?: boolean
  }

  export type JobVectorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "embedding", ExtArgs["result"]["jobVector"]>
  export type JobVectorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type JobVectorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type JobVectorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $JobVectorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobVector"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      embedding: Uint8Array
    }, ExtArgs["result"]["jobVector"]>
    composites: {}
  }

  type JobVectorGetPayload<S extends boolean | null | undefined | JobVectorDefaultArgs> = $Result.GetResult<Prisma.$JobVectorPayload, S>

  type JobVectorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobVectorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobVectorCountAggregateInputType | true
    }

  export interface JobVectorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobVector'], meta: { name: 'JobVector' } }
    /**
     * Find zero or one JobVector that matches the filter.
     * @param {JobVectorFindUniqueArgs} args - Arguments to find a JobVector
     * @example
     * // Get one JobVector
     * const jobVector = await prisma.jobVector.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobVectorFindUniqueArgs>(args: SelectSubset<T, JobVectorFindUniqueArgs<ExtArgs>>): Prisma__JobVectorClient<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobVector that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobVectorFindUniqueOrThrowArgs} args - Arguments to find a JobVector
     * @example
     * // Get one JobVector
     * const jobVector = await prisma.jobVector.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobVectorFindUniqueOrThrowArgs>(args: SelectSubset<T, JobVectorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobVectorClient<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobVector that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobVectorFindFirstArgs} args - Arguments to find a JobVector
     * @example
     * // Get one JobVector
     * const jobVector = await prisma.jobVector.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobVectorFindFirstArgs>(args?: SelectSubset<T, JobVectorFindFirstArgs<ExtArgs>>): Prisma__JobVectorClient<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobVector that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobVectorFindFirstOrThrowArgs} args - Arguments to find a JobVector
     * @example
     * // Get one JobVector
     * const jobVector = await prisma.jobVector.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobVectorFindFirstOrThrowArgs>(args?: SelectSubset<T, JobVectorFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobVectorClient<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobVectors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobVectorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobVectors
     * const jobVectors = await prisma.jobVector.findMany()
     * 
     * // Get first 10 JobVectors
     * const jobVectors = await prisma.jobVector.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobVectorWithIdOnly = await prisma.jobVector.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobVectorFindManyArgs>(args?: SelectSubset<T, JobVectorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobVector.
     * @param {JobVectorCreateArgs} args - Arguments to create a JobVector.
     * @example
     * // Create one JobVector
     * const JobVector = await prisma.jobVector.create({
     *   data: {
     *     // ... data to create a JobVector
     *   }
     * })
     * 
     */
    create<T extends JobVectorCreateArgs>(args: SelectSubset<T, JobVectorCreateArgs<ExtArgs>>): Prisma__JobVectorClient<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobVectors.
     * @param {JobVectorCreateManyArgs} args - Arguments to create many JobVectors.
     * @example
     * // Create many JobVectors
     * const jobVector = await prisma.jobVector.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobVectorCreateManyArgs>(args?: SelectSubset<T, JobVectorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobVectors and returns the data saved in the database.
     * @param {JobVectorCreateManyAndReturnArgs} args - Arguments to create many JobVectors.
     * @example
     * // Create many JobVectors
     * const jobVector = await prisma.jobVector.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobVectors and only return the `id`
     * const jobVectorWithIdOnly = await prisma.jobVector.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobVectorCreateManyAndReturnArgs>(args?: SelectSubset<T, JobVectorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobVector.
     * @param {JobVectorDeleteArgs} args - Arguments to delete one JobVector.
     * @example
     * // Delete one JobVector
     * const JobVector = await prisma.jobVector.delete({
     *   where: {
     *     // ... filter to delete one JobVector
     *   }
     * })
     * 
     */
    delete<T extends JobVectorDeleteArgs>(args: SelectSubset<T, JobVectorDeleteArgs<ExtArgs>>): Prisma__JobVectorClient<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobVector.
     * @param {JobVectorUpdateArgs} args - Arguments to update one JobVector.
     * @example
     * // Update one JobVector
     * const jobVector = await prisma.jobVector.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobVectorUpdateArgs>(args: SelectSubset<T, JobVectorUpdateArgs<ExtArgs>>): Prisma__JobVectorClient<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobVectors.
     * @param {JobVectorDeleteManyArgs} args - Arguments to filter JobVectors to delete.
     * @example
     * // Delete a few JobVectors
     * const { count } = await prisma.jobVector.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobVectorDeleteManyArgs>(args?: SelectSubset<T, JobVectorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobVectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobVectorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobVectors
     * const jobVector = await prisma.jobVector.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobVectorUpdateManyArgs>(args: SelectSubset<T, JobVectorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobVectors and returns the data updated in the database.
     * @param {JobVectorUpdateManyAndReturnArgs} args - Arguments to update many JobVectors.
     * @example
     * // Update many JobVectors
     * const jobVector = await prisma.jobVector.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobVectors and only return the `id`
     * const jobVectorWithIdOnly = await prisma.jobVector.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobVectorUpdateManyAndReturnArgs>(args: SelectSubset<T, JobVectorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobVector.
     * @param {JobVectorUpsertArgs} args - Arguments to update or create a JobVector.
     * @example
     * // Update or create a JobVector
     * const jobVector = await prisma.jobVector.upsert({
     *   create: {
     *     // ... data to create a JobVector
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobVector we want to update
     *   }
     * })
     */
    upsert<T extends JobVectorUpsertArgs>(args: SelectSubset<T, JobVectorUpsertArgs<ExtArgs>>): Prisma__JobVectorClient<$Result.GetResult<Prisma.$JobVectorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobVectors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobVectorCountArgs} args - Arguments to filter JobVectors to count.
     * @example
     * // Count the number of JobVectors
     * const count = await prisma.jobVector.count({
     *   where: {
     *     // ... the filter for the JobVectors we want to count
     *   }
     * })
    **/
    count<T extends JobVectorCountArgs>(
      args?: Subset<T, JobVectorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobVectorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobVector.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobVectorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobVectorAggregateArgs>(args: Subset<T, JobVectorAggregateArgs>): Prisma.PrismaPromise<GetJobVectorAggregateType<T>>

    /**
     * Group by JobVector.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobVectorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobVectorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobVectorGroupByArgs['orderBy'] }
        : { orderBy?: JobVectorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobVectorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobVectorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobVector model
   */
  readonly fields: JobVectorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobVector.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobVectorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobVector model
   */
  interface JobVectorFieldRefs {
    readonly id: FieldRef<"JobVector", 'String'>
    readonly jobId: FieldRef<"JobVector", 'String'>
    readonly embedding: FieldRef<"JobVector", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * JobVector findUnique
   */
  export type JobVectorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * Filter, which JobVector to fetch.
     */
    where: JobVectorWhereUniqueInput
  }

  /**
   * JobVector findUniqueOrThrow
   */
  export type JobVectorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * Filter, which JobVector to fetch.
     */
    where: JobVectorWhereUniqueInput
  }

  /**
   * JobVector findFirst
   */
  export type JobVectorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * Filter, which JobVector to fetch.
     */
    where?: JobVectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobVectors to fetch.
     */
    orderBy?: JobVectorOrderByWithRelationInput | JobVectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobVectors.
     */
    cursor?: JobVectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobVectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobVectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobVectors.
     */
    distinct?: JobVectorScalarFieldEnum | JobVectorScalarFieldEnum[]
  }

  /**
   * JobVector findFirstOrThrow
   */
  export type JobVectorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * Filter, which JobVector to fetch.
     */
    where?: JobVectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobVectors to fetch.
     */
    orderBy?: JobVectorOrderByWithRelationInput | JobVectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobVectors.
     */
    cursor?: JobVectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobVectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobVectors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobVectors.
     */
    distinct?: JobVectorScalarFieldEnum | JobVectorScalarFieldEnum[]
  }

  /**
   * JobVector findMany
   */
  export type JobVectorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * Filter, which JobVectors to fetch.
     */
    where?: JobVectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobVectors to fetch.
     */
    orderBy?: JobVectorOrderByWithRelationInput | JobVectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobVectors.
     */
    cursor?: JobVectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobVectors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobVectors.
     */
    skip?: number
    distinct?: JobVectorScalarFieldEnum | JobVectorScalarFieldEnum[]
  }

  /**
   * JobVector create
   */
  export type JobVectorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * The data needed to create a JobVector.
     */
    data: XOR<JobVectorCreateInput, JobVectorUncheckedCreateInput>
  }

  /**
   * JobVector createMany
   */
  export type JobVectorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobVectors.
     */
    data: JobVectorCreateManyInput | JobVectorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobVector createManyAndReturn
   */
  export type JobVectorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * The data used to create many JobVectors.
     */
    data: JobVectorCreateManyInput | JobVectorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobVector update
   */
  export type JobVectorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * The data needed to update a JobVector.
     */
    data: XOR<JobVectorUpdateInput, JobVectorUncheckedUpdateInput>
    /**
     * Choose, which JobVector to update.
     */
    where: JobVectorWhereUniqueInput
  }

  /**
   * JobVector updateMany
   */
  export type JobVectorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobVectors.
     */
    data: XOR<JobVectorUpdateManyMutationInput, JobVectorUncheckedUpdateManyInput>
    /**
     * Filter which JobVectors to update
     */
    where?: JobVectorWhereInput
    /**
     * Limit how many JobVectors to update.
     */
    limit?: number
  }

  /**
   * JobVector updateManyAndReturn
   */
  export type JobVectorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * The data used to update JobVectors.
     */
    data: XOR<JobVectorUpdateManyMutationInput, JobVectorUncheckedUpdateManyInput>
    /**
     * Filter which JobVectors to update
     */
    where?: JobVectorWhereInput
    /**
     * Limit how many JobVectors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobVector upsert
   */
  export type JobVectorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * The filter to search for the JobVector to update in case it exists.
     */
    where: JobVectorWhereUniqueInput
    /**
     * In case the JobVector found by the `where` argument doesn't exist, create a new JobVector with this data.
     */
    create: XOR<JobVectorCreateInput, JobVectorUncheckedCreateInput>
    /**
     * In case the JobVector was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobVectorUpdateInput, JobVectorUncheckedUpdateInput>
  }

  /**
   * JobVector delete
   */
  export type JobVectorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
    /**
     * Filter which JobVector to delete.
     */
    where: JobVectorWhereUniqueInput
  }

  /**
   * JobVector deleteMany
   */
  export type JobVectorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobVectors to delete
     */
    where?: JobVectorWhereInput
    /**
     * Limit how many JobVectors to delete.
     */
    limit?: number
  }

  /**
   * JobVector without action
   */
  export type JobVectorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobVector
     */
    select?: JobVectorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobVector
     */
    omit?: JobVectorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobVectorInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    score: number | null
  }

  export type MatchSumAggregateOutputType = {
    score: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    candidateId: string | null
    score: number | null
    reason: string | null
    summaryId: string | null
    createdAt: Date | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    candidateId: string | null
    score: number | null
    reason: string | null
    summaryId: string | null
    createdAt: Date | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    jobId: number
    candidateId: number
    score: number
    reason: number
    summaryId: number
    createdAt: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    score?: true
  }

  export type MatchSumAggregateInputType = {
    score?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    score?: true
    reason?: true
    summaryId?: true
    createdAt?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    score?: true
    reason?: true
    summaryId?: true
    createdAt?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    score?: true
    reason?: true
    summaryId?: true
    createdAt?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: string
    jobId: string
    candidateId: string
    score: number
    reason: string | null
    summaryId: string | null
    createdAt: Date
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    score?: boolean
    reason?: boolean
    summaryId?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    score?: boolean
    reason?: boolean
    summaryId?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    score?: boolean
    reason?: boolean
    summaryId?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    score?: boolean
    reason?: boolean
    summaryId?: boolean
    createdAt?: boolean
  }

  export type MatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "candidateId" | "score" | "reason" | "summaryId" | "createdAt", ExtArgs["result"]["match"]>
  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type MatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      candidateId: string
      score: number
      reason: string | null
      summaryId: string | null
      createdAt: Date
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches and returns the data updated in the database.
     * @param {MatchUpdateManyAndReturnArgs} args - Arguments to update many Matches.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'String'>
    readonly jobId: FieldRef<"Match", 'String'>
    readonly candidateId: FieldRef<"Match", 'String'>
    readonly score: FieldRef<"Match", 'Float'>
    readonly reason: FieldRef<"Match", 'String'>
    readonly summaryId: FieldRef<"Match", 'String'>
    readonly createdAt: FieldRef<"Match", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
  }

  /**
   * Match updateManyAndReturn
   */
  export type MatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to delete.
     */
    limit?: number
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model GeneratedSummary
   */

  export type AggregateGeneratedSummary = {
    _count: GeneratedSummaryCountAggregateOutputType | null
    _min: GeneratedSummaryMinAggregateOutputType | null
    _max: GeneratedSummaryMaxAggregateOutputType | null
  }

  export type GeneratedSummaryMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    candidateId: string | null
    s3_key: string | null
    text: string | null
    createdAt: Date | null
  }

  export type GeneratedSummaryMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    candidateId: string | null
    s3_key: string | null
    text: string | null
    createdAt: Date | null
  }

  export type GeneratedSummaryCountAggregateOutputType = {
    id: number
    jobId: number
    candidateId: number
    s3_key: number
    text: number
    createdAt: number
    _all: number
  }


  export type GeneratedSummaryMinAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    s3_key?: true
    text?: true
    createdAt?: true
  }

  export type GeneratedSummaryMaxAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    s3_key?: true
    text?: true
    createdAt?: true
  }

  export type GeneratedSummaryCountAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    s3_key?: true
    text?: true
    createdAt?: true
    _all?: true
  }

  export type GeneratedSummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedSummary to aggregate.
     */
    where?: GeneratedSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSummaries to fetch.
     */
    orderBy?: GeneratedSummaryOrderByWithRelationInput | GeneratedSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneratedSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratedSummaries
    **/
    _count?: true | GeneratedSummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratedSummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratedSummaryMaxAggregateInputType
  }

  export type GetGeneratedSummaryAggregateType<T extends GeneratedSummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratedSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratedSummary[P]>
      : GetScalarType<T[P], AggregateGeneratedSummary[P]>
  }




  export type GeneratedSummaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedSummaryWhereInput
    orderBy?: GeneratedSummaryOrderByWithAggregationInput | GeneratedSummaryOrderByWithAggregationInput[]
    by: GeneratedSummaryScalarFieldEnum[] | GeneratedSummaryScalarFieldEnum
    having?: GeneratedSummaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratedSummaryCountAggregateInputType | true
    _min?: GeneratedSummaryMinAggregateInputType
    _max?: GeneratedSummaryMaxAggregateInputType
  }

  export type GeneratedSummaryGroupByOutputType = {
    id: string
    jobId: string
    candidateId: string
    s3_key: string
    text: string
    createdAt: Date
    _count: GeneratedSummaryCountAggregateOutputType | null
    _min: GeneratedSummaryMinAggregateOutputType | null
    _max: GeneratedSummaryMaxAggregateOutputType | null
  }

  type GetGeneratedSummaryGroupByPayload<T extends GeneratedSummaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneratedSummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratedSummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratedSummaryGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratedSummaryGroupByOutputType[P]>
        }
      >
    >


  export type GeneratedSummarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    s3_key?: boolean
    text?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["generatedSummary"]>

  export type GeneratedSummarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    s3_key?: boolean
    text?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["generatedSummary"]>

  export type GeneratedSummarySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    s3_key?: boolean
    text?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["generatedSummary"]>

  export type GeneratedSummarySelectScalar = {
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    s3_key?: boolean
    text?: boolean
    createdAt?: boolean
  }

  export type GeneratedSummaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "candidateId" | "s3_key" | "text" | "createdAt", ExtArgs["result"]["generatedSummary"]>

  export type $GeneratedSummaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneratedSummary"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      candidateId: string
      s3_key: string
      text: string
      createdAt: Date
    }, ExtArgs["result"]["generatedSummary"]>
    composites: {}
  }

  type GeneratedSummaryGetPayload<S extends boolean | null | undefined | GeneratedSummaryDefaultArgs> = $Result.GetResult<Prisma.$GeneratedSummaryPayload, S>

  type GeneratedSummaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeneratedSummaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeneratedSummaryCountAggregateInputType | true
    }

  export interface GeneratedSummaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneratedSummary'], meta: { name: 'GeneratedSummary' } }
    /**
     * Find zero or one GeneratedSummary that matches the filter.
     * @param {GeneratedSummaryFindUniqueArgs} args - Arguments to find a GeneratedSummary
     * @example
     * // Get one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneratedSummaryFindUniqueArgs>(args: SelectSubset<T, GeneratedSummaryFindUniqueArgs<ExtArgs>>): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeneratedSummary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeneratedSummaryFindUniqueOrThrowArgs} args - Arguments to find a GeneratedSummary
     * @example
     * // Get one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneratedSummaryFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneratedSummaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneratedSummary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryFindFirstArgs} args - Arguments to find a GeneratedSummary
     * @example
     * // Get one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneratedSummaryFindFirstArgs>(args?: SelectSubset<T, GeneratedSummaryFindFirstArgs<ExtArgs>>): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneratedSummary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryFindFirstOrThrowArgs} args - Arguments to find a GeneratedSummary
     * @example
     * // Get one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneratedSummaryFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneratedSummaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeneratedSummaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratedSummaries
     * const generatedSummaries = await prisma.generatedSummary.findMany()
     * 
     * // Get first 10 GeneratedSummaries
     * const generatedSummaries = await prisma.generatedSummary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatedSummaryWithIdOnly = await prisma.generatedSummary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneratedSummaryFindManyArgs>(args?: SelectSubset<T, GeneratedSummaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeneratedSummary.
     * @param {GeneratedSummaryCreateArgs} args - Arguments to create a GeneratedSummary.
     * @example
     * // Create one GeneratedSummary
     * const GeneratedSummary = await prisma.generatedSummary.create({
     *   data: {
     *     // ... data to create a GeneratedSummary
     *   }
     * })
     * 
     */
    create<T extends GeneratedSummaryCreateArgs>(args: SelectSubset<T, GeneratedSummaryCreateArgs<ExtArgs>>): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeneratedSummaries.
     * @param {GeneratedSummaryCreateManyArgs} args - Arguments to create many GeneratedSummaries.
     * @example
     * // Create many GeneratedSummaries
     * const generatedSummary = await prisma.generatedSummary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneratedSummaryCreateManyArgs>(args?: SelectSubset<T, GeneratedSummaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneratedSummaries and returns the data saved in the database.
     * @param {GeneratedSummaryCreateManyAndReturnArgs} args - Arguments to create many GeneratedSummaries.
     * @example
     * // Create many GeneratedSummaries
     * const generatedSummary = await prisma.generatedSummary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneratedSummaries and only return the `id`
     * const generatedSummaryWithIdOnly = await prisma.generatedSummary.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneratedSummaryCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneratedSummaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GeneratedSummary.
     * @param {GeneratedSummaryDeleteArgs} args - Arguments to delete one GeneratedSummary.
     * @example
     * // Delete one GeneratedSummary
     * const GeneratedSummary = await prisma.generatedSummary.delete({
     *   where: {
     *     // ... filter to delete one GeneratedSummary
     *   }
     * })
     * 
     */
    delete<T extends GeneratedSummaryDeleteArgs>(args: SelectSubset<T, GeneratedSummaryDeleteArgs<ExtArgs>>): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeneratedSummary.
     * @param {GeneratedSummaryUpdateArgs} args - Arguments to update one GeneratedSummary.
     * @example
     * // Update one GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneratedSummaryUpdateArgs>(args: SelectSubset<T, GeneratedSummaryUpdateArgs<ExtArgs>>): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeneratedSummaries.
     * @param {GeneratedSummaryDeleteManyArgs} args - Arguments to filter GeneratedSummaries to delete.
     * @example
     * // Delete a few GeneratedSummaries
     * const { count } = await prisma.generatedSummary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneratedSummaryDeleteManyArgs>(args?: SelectSubset<T, GeneratedSummaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratedSummaries
     * const generatedSummary = await prisma.generatedSummary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneratedSummaryUpdateManyArgs>(args: SelectSubset<T, GeneratedSummaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedSummaries and returns the data updated in the database.
     * @param {GeneratedSummaryUpdateManyAndReturnArgs} args - Arguments to update many GeneratedSummaries.
     * @example
     * // Update many GeneratedSummaries
     * const generatedSummary = await prisma.generatedSummary.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GeneratedSummaries and only return the `id`
     * const generatedSummaryWithIdOnly = await prisma.generatedSummary.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GeneratedSummaryUpdateManyAndReturnArgs>(args: SelectSubset<T, GeneratedSummaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GeneratedSummary.
     * @param {GeneratedSummaryUpsertArgs} args - Arguments to update or create a GeneratedSummary.
     * @example
     * // Update or create a GeneratedSummary
     * const generatedSummary = await prisma.generatedSummary.upsert({
     *   create: {
     *     // ... data to create a GeneratedSummary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratedSummary we want to update
     *   }
     * })
     */
    upsert<T extends GeneratedSummaryUpsertArgs>(args: SelectSubset<T, GeneratedSummaryUpsertArgs<ExtArgs>>): Prisma__GeneratedSummaryClient<$Result.GetResult<Prisma.$GeneratedSummaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeneratedSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryCountArgs} args - Arguments to filter GeneratedSummaries to count.
     * @example
     * // Count the number of GeneratedSummaries
     * const count = await prisma.generatedSummary.count({
     *   where: {
     *     // ... the filter for the GeneratedSummaries we want to count
     *   }
     * })
    **/
    count<T extends GeneratedSummaryCountArgs>(
      args?: Subset<T, GeneratedSummaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratedSummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratedSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratedSummaryAggregateArgs>(args: Subset<T, GeneratedSummaryAggregateArgs>): Prisma.PrismaPromise<GetGeneratedSummaryAggregateType<T>>

    /**
     * Group by GeneratedSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedSummaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratedSummaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratedSummaryGroupByArgs['orderBy'] }
        : { orderBy?: GeneratedSummaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratedSummaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratedSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneratedSummary model
   */
  readonly fields: GeneratedSummaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratedSummary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneratedSummaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneratedSummary model
   */
  interface GeneratedSummaryFieldRefs {
    readonly id: FieldRef<"GeneratedSummary", 'String'>
    readonly jobId: FieldRef<"GeneratedSummary", 'String'>
    readonly candidateId: FieldRef<"GeneratedSummary", 'String'>
    readonly s3_key: FieldRef<"GeneratedSummary", 'String'>
    readonly text: FieldRef<"GeneratedSummary", 'String'>
    readonly createdAt: FieldRef<"GeneratedSummary", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GeneratedSummary findUnique
   */
  export type GeneratedSummaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedSummary to fetch.
     */
    where: GeneratedSummaryWhereUniqueInput
  }

  /**
   * GeneratedSummary findUniqueOrThrow
   */
  export type GeneratedSummaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedSummary to fetch.
     */
    where: GeneratedSummaryWhereUniqueInput
  }

  /**
   * GeneratedSummary findFirst
   */
  export type GeneratedSummaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedSummary to fetch.
     */
    where?: GeneratedSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSummaries to fetch.
     */
    orderBy?: GeneratedSummaryOrderByWithRelationInput | GeneratedSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedSummaries.
     */
    cursor?: GeneratedSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedSummaries.
     */
    distinct?: GeneratedSummaryScalarFieldEnum | GeneratedSummaryScalarFieldEnum[]
  }

  /**
   * GeneratedSummary findFirstOrThrow
   */
  export type GeneratedSummaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedSummary to fetch.
     */
    where?: GeneratedSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSummaries to fetch.
     */
    orderBy?: GeneratedSummaryOrderByWithRelationInput | GeneratedSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedSummaries.
     */
    cursor?: GeneratedSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedSummaries.
     */
    distinct?: GeneratedSummaryScalarFieldEnum | GeneratedSummaryScalarFieldEnum[]
  }

  /**
   * GeneratedSummary findMany
   */
  export type GeneratedSummaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedSummaries to fetch.
     */
    where?: GeneratedSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedSummaries to fetch.
     */
    orderBy?: GeneratedSummaryOrderByWithRelationInput | GeneratedSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratedSummaries.
     */
    cursor?: GeneratedSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedSummaries.
     */
    skip?: number
    distinct?: GeneratedSummaryScalarFieldEnum | GeneratedSummaryScalarFieldEnum[]
  }

  /**
   * GeneratedSummary create
   */
  export type GeneratedSummaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * The data needed to create a GeneratedSummary.
     */
    data: XOR<GeneratedSummaryCreateInput, GeneratedSummaryUncheckedCreateInput>
  }

  /**
   * GeneratedSummary createMany
   */
  export type GeneratedSummaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneratedSummaries.
     */
    data: GeneratedSummaryCreateManyInput | GeneratedSummaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneratedSummary createManyAndReturn
   */
  export type GeneratedSummaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * The data used to create many GeneratedSummaries.
     */
    data: GeneratedSummaryCreateManyInput | GeneratedSummaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneratedSummary update
   */
  export type GeneratedSummaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * The data needed to update a GeneratedSummary.
     */
    data: XOR<GeneratedSummaryUpdateInput, GeneratedSummaryUncheckedUpdateInput>
    /**
     * Choose, which GeneratedSummary to update.
     */
    where: GeneratedSummaryWhereUniqueInput
  }

  /**
   * GeneratedSummary updateMany
   */
  export type GeneratedSummaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneratedSummaries.
     */
    data: XOR<GeneratedSummaryUpdateManyMutationInput, GeneratedSummaryUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedSummaries to update
     */
    where?: GeneratedSummaryWhereInput
    /**
     * Limit how many GeneratedSummaries to update.
     */
    limit?: number
  }

  /**
   * GeneratedSummary updateManyAndReturn
   */
  export type GeneratedSummaryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * The data used to update GeneratedSummaries.
     */
    data: XOR<GeneratedSummaryUpdateManyMutationInput, GeneratedSummaryUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedSummaries to update
     */
    where?: GeneratedSummaryWhereInput
    /**
     * Limit how many GeneratedSummaries to update.
     */
    limit?: number
  }

  /**
   * GeneratedSummary upsert
   */
  export type GeneratedSummaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * The filter to search for the GeneratedSummary to update in case it exists.
     */
    where: GeneratedSummaryWhereUniqueInput
    /**
     * In case the GeneratedSummary found by the `where` argument doesn't exist, create a new GeneratedSummary with this data.
     */
    create: XOR<GeneratedSummaryCreateInput, GeneratedSummaryUncheckedCreateInput>
    /**
     * In case the GeneratedSummary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneratedSummaryUpdateInput, GeneratedSummaryUncheckedUpdateInput>
  }

  /**
   * GeneratedSummary delete
   */
  export type GeneratedSummaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
    /**
     * Filter which GeneratedSummary to delete.
     */
    where: GeneratedSummaryWhereUniqueInput
  }

  /**
   * GeneratedSummary deleteMany
   */
  export type GeneratedSummaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedSummaries to delete
     */
    where?: GeneratedSummaryWhereInput
    /**
     * Limit how many GeneratedSummaries to delete.
     */
    limit?: number
  }

  /**
   * GeneratedSummary without action
   */
  export type GeneratedSummaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedSummary
     */
    select?: GeneratedSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedSummary
     */
    omit?: GeneratedSummaryOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    email: 'email',
    name: 'name',
    role: 'role',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    title: 'title',
    description: 'description',
    createdById: 'createdById',
    createdAt: 'createdAt'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    createdAt: 'createdAt'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const CvFileScalarFieldEnum: {
    id: 'id',
    candidateId: 'candidateId',
    s3_key: 's3_key',
    file_name: 'file_name',
    content_type: 'content_type',
    size: 'size',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type CvFileScalarFieldEnum = (typeof CvFileScalarFieldEnum)[keyof typeof CvFileScalarFieldEnum]


  export const CandidateTextScalarFieldEnum: {
    id: 'id',
    candidateId: 'candidateId',
    text: 'text'
  };

  export type CandidateTextScalarFieldEnum = (typeof CandidateTextScalarFieldEnum)[keyof typeof CandidateTextScalarFieldEnum]


  export const VectorScalarFieldEnum: {
    id: 'id',
    candidateTextId: 'candidateTextId',
    candidateId: 'candidateId',
    embedding: 'embedding'
  };

  export type VectorScalarFieldEnum = (typeof VectorScalarFieldEnum)[keyof typeof VectorScalarFieldEnum]


  export const JobVectorScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    embedding: 'embedding'
  };

  export type JobVectorScalarFieldEnum = (typeof JobVectorScalarFieldEnum)[keyof typeof JobVectorScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    candidateId: 'candidateId',
    score: 'score',
    reason: 'reason',
    summaryId: 'summaryId',
    createdAt: 'createdAt'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const GeneratedSummaryScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    candidateId: 'candidateId',
    s3_key: 's3_key',
    text: 'text',
    createdAt: 'createdAt'
  };

  export type GeneratedSummaryScalarFieldEnum = (typeof GeneratedSummaryScalarFieldEnum)[keyof typeof GeneratedSummaryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'CvStatus'
   */
  export type EnumCvStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CvStatus'>
    


  /**
   * Reference to a field of type 'CvStatus[]'
   */
  export type ListEnumCvStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CvStatus[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: StringFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    users?: UserListRelationFilter
    jobs?: JobListRelationFilter
    candidates?: CandidateListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    jobs?: JobOrderByRelationAggregateInput
    candidates?: CandidateOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    users?: UserListRelationFilter
    jobs?: JobListRelationFilter
    candidates?: CandidateListRelationFilter
  }, "id" | "name">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: TenantCountOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tenant"> | string
    name?: StringWithAggregatesFilter<"Tenant"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    tenantId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    tenantId?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    tenantId?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: StringFilter<"Job"> | string
    tenantId?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    createdById?: StringFilter<"Job"> | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    jobVectors?: JobVectorListRelationFilter
    matches?: MatchListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    jobVectors?: JobVectorOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    tenantId?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    createdById?: StringFilter<"Job"> | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    jobVectors?: JobVectorListRelationFilter
    matches?: MatchListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Job"> | string
    tenantId?: StringWithAggregatesFilter<"Job"> | string
    title?: StringWithAggregatesFilter<"Job"> | string
    description?: StringWithAggregatesFilter<"Job"> | string
    createdById?: StringWithAggregatesFilter<"Job"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type CandidateWhereInput = {
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    id?: StringFilter<"Candidate"> | string
    tenantId?: StringFilter<"Candidate"> | string
    name?: StringNullableFilter<"Candidate"> | string | null
    email?: StringNullableFilter<"Candidate"> | string | null
    phone?: StringNullableFilter<"Candidate"> | string | null
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    cvs?: CvFileListRelationFilter
    texts?: CandidateTextListRelationFilter
    matches?: MatchListRelationFilter
  }

  export type CandidateOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    cvs?: CvFileOrderByRelationAggregateInput
    texts?: CandidateTextOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
  }

  export type CandidateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    tenantId?: StringFilter<"Candidate"> | string
    name?: StringNullableFilter<"Candidate"> | string | null
    email?: StringNullableFilter<"Candidate"> | string | null
    phone?: StringNullableFilter<"Candidate"> | string | null
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    cvs?: CvFileListRelationFilter
    texts?: CandidateTextListRelationFilter
    matches?: MatchListRelationFilter
  }, "id">

  export type CandidateOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    OR?: CandidateScalarWhereWithAggregatesInput[]
    NOT?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Candidate"> | string
    tenantId?: StringWithAggregatesFilter<"Candidate"> | string
    name?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    email?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
  }

  export type CvFileWhereInput = {
    AND?: CvFileWhereInput | CvFileWhereInput[]
    OR?: CvFileWhereInput[]
    NOT?: CvFileWhereInput | CvFileWhereInput[]
    id?: StringFilter<"CvFile"> | string
    candidateId?: StringFilter<"CvFile"> | string
    s3_key?: StringFilter<"CvFile"> | string
    file_name?: StringFilter<"CvFile"> | string
    content_type?: StringFilter<"CvFile"> | string
    size?: IntFilter<"CvFile"> | number
    status?: EnumCvStatusFilter<"CvFile"> | $Enums.CvStatus
    createdAt?: DateTimeFilter<"CvFile"> | Date | string
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type CvFileOrderByWithRelationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    file_name?: SortOrder
    content_type?: SortOrder
    size?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    candidate?: CandidateOrderByWithRelationInput
  }

  export type CvFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CvFileWhereInput | CvFileWhereInput[]
    OR?: CvFileWhereInput[]
    NOT?: CvFileWhereInput | CvFileWhereInput[]
    candidateId?: StringFilter<"CvFile"> | string
    s3_key?: StringFilter<"CvFile"> | string
    file_name?: StringFilter<"CvFile"> | string
    content_type?: StringFilter<"CvFile"> | string
    size?: IntFilter<"CvFile"> | number
    status?: EnumCvStatusFilter<"CvFile"> | $Enums.CvStatus
    createdAt?: DateTimeFilter<"CvFile"> | Date | string
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type CvFileOrderByWithAggregationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    file_name?: SortOrder
    content_type?: SortOrder
    size?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: CvFileCountOrderByAggregateInput
    _avg?: CvFileAvgOrderByAggregateInput
    _max?: CvFileMaxOrderByAggregateInput
    _min?: CvFileMinOrderByAggregateInput
    _sum?: CvFileSumOrderByAggregateInput
  }

  export type CvFileScalarWhereWithAggregatesInput = {
    AND?: CvFileScalarWhereWithAggregatesInput | CvFileScalarWhereWithAggregatesInput[]
    OR?: CvFileScalarWhereWithAggregatesInput[]
    NOT?: CvFileScalarWhereWithAggregatesInput | CvFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CvFile"> | string
    candidateId?: StringWithAggregatesFilter<"CvFile"> | string
    s3_key?: StringWithAggregatesFilter<"CvFile"> | string
    file_name?: StringWithAggregatesFilter<"CvFile"> | string
    content_type?: StringWithAggregatesFilter<"CvFile"> | string
    size?: IntWithAggregatesFilter<"CvFile"> | number
    status?: EnumCvStatusWithAggregatesFilter<"CvFile"> | $Enums.CvStatus
    createdAt?: DateTimeWithAggregatesFilter<"CvFile"> | Date | string
  }

  export type CandidateTextWhereInput = {
    AND?: CandidateTextWhereInput | CandidateTextWhereInput[]
    OR?: CandidateTextWhereInput[]
    NOT?: CandidateTextWhereInput | CandidateTextWhereInput[]
    id?: StringFilter<"CandidateText"> | string
    candidateId?: StringFilter<"CandidateText"> | string
    text?: StringFilter<"CandidateText"> | string
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type CandidateTextOrderByWithRelationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    text?: SortOrder
    candidate?: CandidateOrderByWithRelationInput
  }

  export type CandidateTextWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CandidateTextWhereInput | CandidateTextWhereInput[]
    OR?: CandidateTextWhereInput[]
    NOT?: CandidateTextWhereInput | CandidateTextWhereInput[]
    candidateId?: StringFilter<"CandidateText"> | string
    text?: StringFilter<"CandidateText"> | string
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type CandidateTextOrderByWithAggregationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    text?: SortOrder
    _count?: CandidateTextCountOrderByAggregateInput
    _max?: CandidateTextMaxOrderByAggregateInput
    _min?: CandidateTextMinOrderByAggregateInput
  }

  export type CandidateTextScalarWhereWithAggregatesInput = {
    AND?: CandidateTextScalarWhereWithAggregatesInput | CandidateTextScalarWhereWithAggregatesInput[]
    OR?: CandidateTextScalarWhereWithAggregatesInput[]
    NOT?: CandidateTextScalarWhereWithAggregatesInput | CandidateTextScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CandidateText"> | string
    candidateId?: StringWithAggregatesFilter<"CandidateText"> | string
    text?: StringWithAggregatesFilter<"CandidateText"> | string
  }

  export type VectorWhereInput = {
    AND?: VectorWhereInput | VectorWhereInput[]
    OR?: VectorWhereInput[]
    NOT?: VectorWhereInput | VectorWhereInput[]
    id?: StringFilter<"Vector"> | string
    candidateTextId?: StringNullableFilter<"Vector"> | string | null
    candidateId?: StringNullableFilter<"Vector"> | string | null
    embedding?: BytesFilter<"Vector"> | Uint8Array
  }

  export type VectorOrderByWithRelationInput = {
    id?: SortOrder
    candidateTextId?: SortOrderInput | SortOrder
    candidateId?: SortOrderInput | SortOrder
    embedding?: SortOrder
  }

  export type VectorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VectorWhereInput | VectorWhereInput[]
    OR?: VectorWhereInput[]
    NOT?: VectorWhereInput | VectorWhereInput[]
    candidateTextId?: StringNullableFilter<"Vector"> | string | null
    candidateId?: StringNullableFilter<"Vector"> | string | null
    embedding?: BytesFilter<"Vector"> | Uint8Array
  }, "id">

  export type VectorOrderByWithAggregationInput = {
    id?: SortOrder
    candidateTextId?: SortOrderInput | SortOrder
    candidateId?: SortOrderInput | SortOrder
    embedding?: SortOrder
    _count?: VectorCountOrderByAggregateInput
    _max?: VectorMaxOrderByAggregateInput
    _min?: VectorMinOrderByAggregateInput
  }

  export type VectorScalarWhereWithAggregatesInput = {
    AND?: VectorScalarWhereWithAggregatesInput | VectorScalarWhereWithAggregatesInput[]
    OR?: VectorScalarWhereWithAggregatesInput[]
    NOT?: VectorScalarWhereWithAggregatesInput | VectorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vector"> | string
    candidateTextId?: StringNullableWithAggregatesFilter<"Vector"> | string | null
    candidateId?: StringNullableWithAggregatesFilter<"Vector"> | string | null
    embedding?: BytesWithAggregatesFilter<"Vector"> | Uint8Array
  }

  export type JobVectorWhereInput = {
    AND?: JobVectorWhereInput | JobVectorWhereInput[]
    OR?: JobVectorWhereInput[]
    NOT?: JobVectorWhereInput | JobVectorWhereInput[]
    id?: StringFilter<"JobVector"> | string
    jobId?: StringFilter<"JobVector"> | string
    embedding?: BytesFilter<"JobVector"> | Uint8Array
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type JobVectorOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    embedding?: SortOrder
    job?: JobOrderByWithRelationInput
  }

  export type JobVectorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobVectorWhereInput | JobVectorWhereInput[]
    OR?: JobVectorWhereInput[]
    NOT?: JobVectorWhereInput | JobVectorWhereInput[]
    jobId?: StringFilter<"JobVector"> | string
    embedding?: BytesFilter<"JobVector"> | Uint8Array
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id">

  export type JobVectorOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    embedding?: SortOrder
    _count?: JobVectorCountOrderByAggregateInput
    _max?: JobVectorMaxOrderByAggregateInput
    _min?: JobVectorMinOrderByAggregateInput
  }

  export type JobVectorScalarWhereWithAggregatesInput = {
    AND?: JobVectorScalarWhereWithAggregatesInput | JobVectorScalarWhereWithAggregatesInput[]
    OR?: JobVectorScalarWhereWithAggregatesInput[]
    NOT?: JobVectorScalarWhereWithAggregatesInput | JobVectorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobVector"> | string
    jobId?: StringWithAggregatesFilter<"JobVector"> | string
    embedding?: BytesWithAggregatesFilter<"JobVector"> | Uint8Array
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: StringFilter<"Match"> | string
    jobId?: StringFilter<"Match"> | string
    candidateId?: StringFilter<"Match"> | string
    score?: FloatFilter<"Match"> | number
    reason?: StringNullableFilter<"Match"> | string | null
    summaryId?: StringNullableFilter<"Match"> | string | null
    createdAt?: DateTimeFilter<"Match"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    reason?: SortOrderInput | SortOrder
    summaryId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    job?: JobOrderByWithRelationInput
    candidate?: CandidateOrderByWithRelationInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    jobId?: StringFilter<"Match"> | string
    candidateId?: StringFilter<"Match"> | string
    score?: FloatFilter<"Match"> | number
    reason?: StringNullableFilter<"Match"> | string | null
    summaryId?: StringNullableFilter<"Match"> | string | null
    createdAt?: DateTimeFilter<"Match"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    reason?: SortOrderInput | SortOrder
    summaryId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Match"> | string
    jobId?: StringWithAggregatesFilter<"Match"> | string
    candidateId?: StringWithAggregatesFilter<"Match"> | string
    score?: FloatWithAggregatesFilter<"Match"> | number
    reason?: StringNullableWithAggregatesFilter<"Match"> | string | null
    summaryId?: StringNullableWithAggregatesFilter<"Match"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
  }

  export type GeneratedSummaryWhereInput = {
    AND?: GeneratedSummaryWhereInput | GeneratedSummaryWhereInput[]
    OR?: GeneratedSummaryWhereInput[]
    NOT?: GeneratedSummaryWhereInput | GeneratedSummaryWhereInput[]
    id?: StringFilter<"GeneratedSummary"> | string
    jobId?: StringFilter<"GeneratedSummary"> | string
    candidateId?: StringFilter<"GeneratedSummary"> | string
    s3_key?: StringFilter<"GeneratedSummary"> | string
    text?: StringFilter<"GeneratedSummary"> | string
    createdAt?: DateTimeFilter<"GeneratedSummary"> | Date | string
  }

  export type GeneratedSummaryOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSummaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneratedSummaryWhereInput | GeneratedSummaryWhereInput[]
    OR?: GeneratedSummaryWhereInput[]
    NOT?: GeneratedSummaryWhereInput | GeneratedSummaryWhereInput[]
    jobId?: StringFilter<"GeneratedSummary"> | string
    candidateId?: StringFilter<"GeneratedSummary"> | string
    s3_key?: StringFilter<"GeneratedSummary"> | string
    text?: StringFilter<"GeneratedSummary"> | string
    createdAt?: DateTimeFilter<"GeneratedSummary"> | Date | string
  }, "id">

  export type GeneratedSummaryOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    _count?: GeneratedSummaryCountOrderByAggregateInput
    _max?: GeneratedSummaryMaxOrderByAggregateInput
    _min?: GeneratedSummaryMinOrderByAggregateInput
  }

  export type GeneratedSummaryScalarWhereWithAggregatesInput = {
    AND?: GeneratedSummaryScalarWhereWithAggregatesInput | GeneratedSummaryScalarWhereWithAggregatesInput[]
    OR?: GeneratedSummaryScalarWhereWithAggregatesInput[]
    NOT?: GeneratedSummaryScalarWhereWithAggregatesInput | GeneratedSummaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    jobId?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    candidateId?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    s3_key?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    text?: StringWithAggregatesFilter<"GeneratedSummary"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GeneratedSummary"> | Date | string
  }

  export type TenantCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    jobs?: JobCreateNestedManyWithoutTenantInput
    candidates?: CandidateCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    jobs?: JobUncheckedCreateNestedManyWithoutTenantInput
    candidates?: CandidateUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    jobs?: JobUpdateManyWithoutTenantNestedInput
    candidates?: CandidateUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    jobs?: JobUncheckedUpdateManyWithoutTenantNestedInput
    candidates?: CandidateUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    password: string
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    tenantId: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    password: string
    createdAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    tenantId: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    password: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateInput = {
    id?: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutJobsInput
    jobVectors?: JobVectorCreateNestedManyWithoutJobInput
    matches?: MatchCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: string
    tenantId: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
    jobVectors?: JobVectorUncheckedCreateNestedManyWithoutJobInput
    matches?: MatchUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutJobsNestedInput
    jobVectors?: JobVectorUpdateManyWithoutJobNestedInput
    matches?: MatchUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobVectors?: JobVectorUncheckedUpdateManyWithoutJobNestedInput
    matches?: MatchUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: string
    tenantId: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCandidatesInput
    cvs?: CvFileCreateNestedManyWithoutCandidateInput
    texts?: CandidateTextCreateNestedManyWithoutCandidateInput
    matches?: MatchCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateInput = {
    id?: string
    tenantId: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    cvs?: CvFileUncheckedCreateNestedManyWithoutCandidateInput
    texts?: CandidateTextUncheckedCreateNestedManyWithoutCandidateInput
    matches?: MatchUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCandidatesNestedInput
    cvs?: CvFileUpdateManyWithoutCandidateNestedInput
    texts?: CandidateTextUpdateManyWithoutCandidateNestedInput
    matches?: MatchUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cvs?: CvFileUncheckedUpdateManyWithoutCandidateNestedInput
    texts?: CandidateTextUncheckedUpdateManyWithoutCandidateNestedInput
    matches?: MatchUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateManyInput = {
    id?: string
    tenantId: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
  }

  export type CandidateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CvFileCreateInput = {
    id?: string
    s3_key: string
    file_name: string
    content_type: string
    size: number
    status?: $Enums.CvStatus
    createdAt?: Date | string
    candidate: CandidateCreateNestedOneWithoutCvsInput
  }

  export type CvFileUncheckedCreateInput = {
    id?: string
    candidateId: string
    s3_key: string
    file_name: string
    content_type: string
    size: number
    status?: $Enums.CvStatus
    createdAt?: Date | string
  }

  export type CvFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    content_type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    status?: EnumCvStatusFieldUpdateOperationsInput | $Enums.CvStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutCvsNestedInput
  }

  export type CvFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    content_type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    status?: EnumCvStatusFieldUpdateOperationsInput | $Enums.CvStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CvFileCreateManyInput = {
    id?: string
    candidateId: string
    s3_key: string
    file_name: string
    content_type: string
    size: number
    status?: $Enums.CvStatus
    createdAt?: Date | string
  }

  export type CvFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    content_type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    status?: EnumCvStatusFieldUpdateOperationsInput | $Enums.CvStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CvFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    content_type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    status?: EnumCvStatusFieldUpdateOperationsInput | $Enums.CvStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateTextCreateInput = {
    id?: string
    text: string
    candidate: CandidateCreateNestedOneWithoutTextsInput
  }

  export type CandidateTextUncheckedCreateInput = {
    id?: string
    candidateId: string
    text: string
  }

  export type CandidateTextUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    candidate?: CandidateUpdateOneRequiredWithoutTextsNestedInput
  }

  export type CandidateTextUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateTextCreateManyInput = {
    id?: string
    candidateId: string
    text: string
  }

  export type CandidateTextUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateTextUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type VectorCreateInput = {
    id?: string
    candidateTextId?: string | null
    candidateId?: string | null
    embedding: Uint8Array
  }

  export type VectorUncheckedCreateInput = {
    id?: string
    candidateTextId?: string | null
    candidateId?: string | null
    embedding: Uint8Array
  }

  export type VectorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateTextId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type VectorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateTextId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type VectorCreateManyInput = {
    id?: string
    candidateTextId?: string | null
    candidateId?: string | null
    embedding: Uint8Array
  }

  export type VectorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateTextId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type VectorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateTextId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type JobVectorCreateInput = {
    id?: string
    embedding: Uint8Array
    job: JobCreateNestedOneWithoutJobVectorsInput
  }

  export type JobVectorUncheckedCreateInput = {
    id?: string
    jobId: string
    embedding: Uint8Array
  }

  export type JobVectorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
    job?: JobUpdateOneRequiredWithoutJobVectorsNestedInput
  }

  export type JobVectorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type JobVectorCreateManyInput = {
    id?: string
    jobId: string
    embedding: Uint8Array
  }

  export type JobVectorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type JobVectorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type MatchCreateInput = {
    id?: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutMatchesInput
    candidate: CandidateCreateNestedOneWithoutMatchesInput
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    jobId: string
    candidateId: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutMatchesNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutMatchesNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateManyInput = {
    id?: string
    jobId: string
    candidateId: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSummaryCreateInput = {
    id?: string
    jobId: string
    candidateId: string
    s3_key: string
    text: string
    createdAt?: Date | string
  }

  export type GeneratedSummaryUncheckedCreateInput = {
    id?: string
    jobId: string
    candidateId: string
    s3_key: string
    text: string
    createdAt?: Date | string
  }

  export type GeneratedSummaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSummaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSummaryCreateManyInput = {
    id?: string
    jobId: string
    candidateId: string
    s3_key: string
    text: string
    createdAt?: Date | string
  }

  export type GeneratedSummaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedSummaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type CandidateListRelationFilter = {
    every?: CandidateWhereInput
    some?: CandidateWhereInput
    none?: CandidateWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type TenantScalarRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type JobVectorListRelationFilter = {
    every?: JobVectorWhereInput
    some?: JobVectorWhereInput
    none?: JobVectorWhereInput
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type JobVectorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type CvFileListRelationFilter = {
    every?: CvFileWhereInput
    some?: CvFileWhereInput
    none?: CvFileWhereInput
  }

  export type CandidateTextListRelationFilter = {
    every?: CandidateTextWhereInput
    some?: CandidateTextWhereInput
    none?: CandidateTextWhereInput
  }

  export type CvFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateTextOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumCvStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CvStatus | EnumCvStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CvStatus[] | ListEnumCvStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CvStatus[] | ListEnumCvStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCvStatusFilter<$PrismaModel> | $Enums.CvStatus
  }

  export type CandidateScalarRelationFilter = {
    is?: CandidateWhereInput
    isNot?: CandidateWhereInput
  }

  export type CvFileCountOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    file_name?: SortOrder
    content_type?: SortOrder
    size?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type CvFileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type CvFileMaxOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    file_name?: SortOrder
    content_type?: SortOrder
    size?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type CvFileMinOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    file_name?: SortOrder
    content_type?: SortOrder
    size?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type CvFileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumCvStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CvStatus | EnumCvStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CvStatus[] | ListEnumCvStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CvStatus[] | ListEnumCvStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCvStatusWithAggregatesFilter<$PrismaModel> | $Enums.CvStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCvStatusFilter<$PrismaModel>
    _max?: NestedEnumCvStatusFilter<$PrismaModel>
  }

  export type CandidateTextCountOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    text?: SortOrder
  }

  export type CandidateTextMaxOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    text?: SortOrder
  }

  export type CandidateTextMinOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    text?: SortOrder
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Uint8Array
  }

  export type VectorCountOrderByAggregateInput = {
    id?: SortOrder
    candidateTextId?: SortOrder
    candidateId?: SortOrder
    embedding?: SortOrder
  }

  export type VectorMaxOrderByAggregateInput = {
    id?: SortOrder
    candidateTextId?: SortOrder
    candidateId?: SortOrder
    embedding?: SortOrder
  }

  export type VectorMinOrderByAggregateInput = {
    id?: SortOrder
    candidateTextId?: SortOrder
    candidateId?: SortOrder
    embedding?: SortOrder
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Uint8Array
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type JobScalarRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type JobVectorCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    embedding?: SortOrder
  }

  export type JobVectorMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    embedding?: SortOrder
  }

  export type JobVectorMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    embedding?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    summaryId?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    summaryId?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    summaryId?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type GeneratedSummaryCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSummaryMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedSummaryMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    s3_key?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutTenantInput = {
    create?: XOR<JobCreateWithoutTenantInput, JobUncheckedCreateWithoutTenantInput> | JobCreateWithoutTenantInput[] | JobUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: JobCreateOrConnectWithoutTenantInput | JobCreateOrConnectWithoutTenantInput[]
    createMany?: JobCreateManyTenantInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type CandidateCreateNestedManyWithoutTenantInput = {
    create?: XOR<CandidateCreateWithoutTenantInput, CandidateUncheckedCreateWithoutTenantInput> | CandidateCreateWithoutTenantInput[] | CandidateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutTenantInput | CandidateCreateOrConnectWithoutTenantInput[]
    createMany?: CandidateCreateManyTenantInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<JobCreateWithoutTenantInput, JobUncheckedCreateWithoutTenantInput> | JobCreateWithoutTenantInput[] | JobUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: JobCreateOrConnectWithoutTenantInput | JobCreateOrConnectWithoutTenantInput[]
    createMany?: JobCreateManyTenantInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type CandidateUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CandidateCreateWithoutTenantInput, CandidateUncheckedCreateWithoutTenantInput> | CandidateCreateWithoutTenantInput[] | CandidateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutTenantInput | CandidateCreateOrConnectWithoutTenantInput[]
    createMany?: CandidateCreateManyTenantInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type JobUpdateManyWithoutTenantNestedInput = {
    create?: XOR<JobCreateWithoutTenantInput, JobUncheckedCreateWithoutTenantInput> | JobCreateWithoutTenantInput[] | JobUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: JobCreateOrConnectWithoutTenantInput | JobCreateOrConnectWithoutTenantInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutTenantInput | JobUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: JobCreateManyTenantInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutTenantInput | JobUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: JobUpdateManyWithWhereWithoutTenantInput | JobUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type CandidateUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CandidateCreateWithoutTenantInput, CandidateUncheckedCreateWithoutTenantInput> | CandidateCreateWithoutTenantInput[] | CandidateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutTenantInput | CandidateCreateOrConnectWithoutTenantInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutTenantInput | CandidateUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CandidateCreateManyTenantInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutTenantInput | CandidateUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutTenantInput | CandidateUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<JobCreateWithoutTenantInput, JobUncheckedCreateWithoutTenantInput> | JobCreateWithoutTenantInput[] | JobUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: JobCreateOrConnectWithoutTenantInput | JobCreateOrConnectWithoutTenantInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutTenantInput | JobUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: JobCreateManyTenantInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutTenantInput | JobUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: JobUpdateManyWithWhereWithoutTenantInput | JobUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type CandidateUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CandidateCreateWithoutTenantInput, CandidateUncheckedCreateWithoutTenantInput> | CandidateCreateWithoutTenantInput[] | CandidateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutTenantInput | CandidateCreateOrConnectWithoutTenantInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutTenantInput | CandidateUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CandidateCreateManyTenantInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutTenantInput | CandidateUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutTenantInput | CandidateUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutUsersInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    connect?: TenantWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type TenantUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    upsert?: TenantUpsertWithoutUsersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUsersInput, TenantUpdateWithoutUsersInput>, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type TenantCreateNestedOneWithoutJobsInput = {
    create?: XOR<TenantCreateWithoutJobsInput, TenantUncheckedCreateWithoutJobsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutJobsInput
    connect?: TenantWhereUniqueInput
  }

  export type JobVectorCreateNestedManyWithoutJobInput = {
    create?: XOR<JobVectorCreateWithoutJobInput, JobVectorUncheckedCreateWithoutJobInput> | JobVectorCreateWithoutJobInput[] | JobVectorUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobVectorCreateOrConnectWithoutJobInput | JobVectorCreateOrConnectWithoutJobInput[]
    createMany?: JobVectorCreateManyJobInputEnvelope
    connect?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutJobInput = {
    create?: XOR<MatchCreateWithoutJobInput, MatchUncheckedCreateWithoutJobInput> | MatchCreateWithoutJobInput[] | MatchUncheckedCreateWithoutJobInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutJobInput | MatchCreateOrConnectWithoutJobInput[]
    createMany?: MatchCreateManyJobInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type JobVectorUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobVectorCreateWithoutJobInput, JobVectorUncheckedCreateWithoutJobInput> | JobVectorCreateWithoutJobInput[] | JobVectorUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobVectorCreateOrConnectWithoutJobInput | JobVectorCreateOrConnectWithoutJobInput[]
    createMany?: JobVectorCreateManyJobInputEnvelope
    connect?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<MatchCreateWithoutJobInput, MatchUncheckedCreateWithoutJobInput> | MatchCreateWithoutJobInput[] | MatchUncheckedCreateWithoutJobInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutJobInput | MatchCreateOrConnectWithoutJobInput[]
    createMany?: MatchCreateManyJobInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<TenantCreateWithoutJobsInput, TenantUncheckedCreateWithoutJobsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutJobsInput
    upsert?: TenantUpsertWithoutJobsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutJobsInput, TenantUpdateWithoutJobsInput>, TenantUncheckedUpdateWithoutJobsInput>
  }

  export type JobVectorUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobVectorCreateWithoutJobInput, JobVectorUncheckedCreateWithoutJobInput> | JobVectorCreateWithoutJobInput[] | JobVectorUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobVectorCreateOrConnectWithoutJobInput | JobVectorCreateOrConnectWithoutJobInput[]
    upsert?: JobVectorUpsertWithWhereUniqueWithoutJobInput | JobVectorUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobVectorCreateManyJobInputEnvelope
    set?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
    disconnect?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
    delete?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
    connect?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
    update?: JobVectorUpdateWithWhereUniqueWithoutJobInput | JobVectorUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobVectorUpdateManyWithWhereWithoutJobInput | JobVectorUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobVectorScalarWhereInput | JobVectorScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutJobNestedInput = {
    create?: XOR<MatchCreateWithoutJobInput, MatchUncheckedCreateWithoutJobInput> | MatchCreateWithoutJobInput[] | MatchUncheckedCreateWithoutJobInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutJobInput | MatchCreateOrConnectWithoutJobInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutJobInput | MatchUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: MatchCreateManyJobInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutJobInput | MatchUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutJobInput | MatchUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type JobVectorUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobVectorCreateWithoutJobInput, JobVectorUncheckedCreateWithoutJobInput> | JobVectorCreateWithoutJobInput[] | JobVectorUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobVectorCreateOrConnectWithoutJobInput | JobVectorCreateOrConnectWithoutJobInput[]
    upsert?: JobVectorUpsertWithWhereUniqueWithoutJobInput | JobVectorUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobVectorCreateManyJobInputEnvelope
    set?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
    disconnect?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
    delete?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
    connect?: JobVectorWhereUniqueInput | JobVectorWhereUniqueInput[]
    update?: JobVectorUpdateWithWhereUniqueWithoutJobInput | JobVectorUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobVectorUpdateManyWithWhereWithoutJobInput | JobVectorUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobVectorScalarWhereInput | JobVectorScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<MatchCreateWithoutJobInput, MatchUncheckedCreateWithoutJobInput> | MatchCreateWithoutJobInput[] | MatchUncheckedCreateWithoutJobInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutJobInput | MatchCreateOrConnectWithoutJobInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutJobInput | MatchUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: MatchCreateManyJobInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutJobInput | MatchUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutJobInput | MatchUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutCandidatesInput = {
    create?: XOR<TenantCreateWithoutCandidatesInput, TenantUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCandidatesInput
    connect?: TenantWhereUniqueInput
  }

  export type CvFileCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CvFileCreateWithoutCandidateInput, CvFileUncheckedCreateWithoutCandidateInput> | CvFileCreateWithoutCandidateInput[] | CvFileUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CvFileCreateOrConnectWithoutCandidateInput | CvFileCreateOrConnectWithoutCandidateInput[]
    createMany?: CvFileCreateManyCandidateInputEnvelope
    connect?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
  }

  export type CandidateTextCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CandidateTextCreateWithoutCandidateInput, CandidateTextUncheckedCreateWithoutCandidateInput> | CandidateTextCreateWithoutCandidateInput[] | CandidateTextUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateTextCreateOrConnectWithoutCandidateInput | CandidateTextCreateOrConnectWithoutCandidateInput[]
    createMany?: CandidateTextCreateManyCandidateInputEnvelope
    connect?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutCandidateInput = {
    create?: XOR<MatchCreateWithoutCandidateInput, MatchUncheckedCreateWithoutCandidateInput> | MatchCreateWithoutCandidateInput[] | MatchUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutCandidateInput | MatchCreateOrConnectWithoutCandidateInput[]
    createMany?: MatchCreateManyCandidateInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type CvFileUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CvFileCreateWithoutCandidateInput, CvFileUncheckedCreateWithoutCandidateInput> | CvFileCreateWithoutCandidateInput[] | CvFileUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CvFileCreateOrConnectWithoutCandidateInput | CvFileCreateOrConnectWithoutCandidateInput[]
    createMany?: CvFileCreateManyCandidateInputEnvelope
    connect?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
  }

  export type CandidateTextUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CandidateTextCreateWithoutCandidateInput, CandidateTextUncheckedCreateWithoutCandidateInput> | CandidateTextCreateWithoutCandidateInput[] | CandidateTextUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateTextCreateOrConnectWithoutCandidateInput | CandidateTextCreateOrConnectWithoutCandidateInput[]
    createMany?: CandidateTextCreateManyCandidateInputEnvelope
    connect?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<MatchCreateWithoutCandidateInput, MatchUncheckedCreateWithoutCandidateInput> | MatchCreateWithoutCandidateInput[] | MatchUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutCandidateInput | MatchCreateOrConnectWithoutCandidateInput[]
    createMany?: MatchCreateManyCandidateInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutCandidatesNestedInput = {
    create?: XOR<TenantCreateWithoutCandidatesInput, TenantUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCandidatesInput
    upsert?: TenantUpsertWithoutCandidatesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCandidatesInput, TenantUpdateWithoutCandidatesInput>, TenantUncheckedUpdateWithoutCandidatesInput>
  }

  export type CvFileUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CvFileCreateWithoutCandidateInput, CvFileUncheckedCreateWithoutCandidateInput> | CvFileCreateWithoutCandidateInput[] | CvFileUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CvFileCreateOrConnectWithoutCandidateInput | CvFileCreateOrConnectWithoutCandidateInput[]
    upsert?: CvFileUpsertWithWhereUniqueWithoutCandidateInput | CvFileUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CvFileCreateManyCandidateInputEnvelope
    set?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
    disconnect?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
    delete?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
    connect?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
    update?: CvFileUpdateWithWhereUniqueWithoutCandidateInput | CvFileUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CvFileUpdateManyWithWhereWithoutCandidateInput | CvFileUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CvFileScalarWhereInput | CvFileScalarWhereInput[]
  }

  export type CandidateTextUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CandidateTextCreateWithoutCandidateInput, CandidateTextUncheckedCreateWithoutCandidateInput> | CandidateTextCreateWithoutCandidateInput[] | CandidateTextUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateTextCreateOrConnectWithoutCandidateInput | CandidateTextCreateOrConnectWithoutCandidateInput[]
    upsert?: CandidateTextUpsertWithWhereUniqueWithoutCandidateInput | CandidateTextUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CandidateTextCreateManyCandidateInputEnvelope
    set?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
    disconnect?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
    delete?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
    connect?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
    update?: CandidateTextUpdateWithWhereUniqueWithoutCandidateInput | CandidateTextUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CandidateTextUpdateManyWithWhereWithoutCandidateInput | CandidateTextUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CandidateTextScalarWhereInput | CandidateTextScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<MatchCreateWithoutCandidateInput, MatchUncheckedCreateWithoutCandidateInput> | MatchCreateWithoutCandidateInput[] | MatchUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutCandidateInput | MatchCreateOrConnectWithoutCandidateInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutCandidateInput | MatchUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: MatchCreateManyCandidateInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutCandidateInput | MatchUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutCandidateInput | MatchUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type CvFileUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CvFileCreateWithoutCandidateInput, CvFileUncheckedCreateWithoutCandidateInput> | CvFileCreateWithoutCandidateInput[] | CvFileUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CvFileCreateOrConnectWithoutCandidateInput | CvFileCreateOrConnectWithoutCandidateInput[]
    upsert?: CvFileUpsertWithWhereUniqueWithoutCandidateInput | CvFileUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CvFileCreateManyCandidateInputEnvelope
    set?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
    disconnect?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
    delete?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
    connect?: CvFileWhereUniqueInput | CvFileWhereUniqueInput[]
    update?: CvFileUpdateWithWhereUniqueWithoutCandidateInput | CvFileUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CvFileUpdateManyWithWhereWithoutCandidateInput | CvFileUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CvFileScalarWhereInput | CvFileScalarWhereInput[]
  }

  export type CandidateTextUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CandidateTextCreateWithoutCandidateInput, CandidateTextUncheckedCreateWithoutCandidateInput> | CandidateTextCreateWithoutCandidateInput[] | CandidateTextUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateTextCreateOrConnectWithoutCandidateInput | CandidateTextCreateOrConnectWithoutCandidateInput[]
    upsert?: CandidateTextUpsertWithWhereUniqueWithoutCandidateInput | CandidateTextUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CandidateTextCreateManyCandidateInputEnvelope
    set?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
    disconnect?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
    delete?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
    connect?: CandidateTextWhereUniqueInput | CandidateTextWhereUniqueInput[]
    update?: CandidateTextUpdateWithWhereUniqueWithoutCandidateInput | CandidateTextUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CandidateTextUpdateManyWithWhereWithoutCandidateInput | CandidateTextUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CandidateTextScalarWhereInput | CandidateTextScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<MatchCreateWithoutCandidateInput, MatchUncheckedCreateWithoutCandidateInput> | MatchCreateWithoutCandidateInput[] | MatchUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutCandidateInput | MatchCreateOrConnectWithoutCandidateInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutCandidateInput | MatchUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: MatchCreateManyCandidateInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutCandidateInput | MatchUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutCandidateInput | MatchUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type CandidateCreateNestedOneWithoutCvsInput = {
    create?: XOR<CandidateCreateWithoutCvsInput, CandidateUncheckedCreateWithoutCvsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutCvsInput
    connect?: CandidateWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumCvStatusFieldUpdateOperationsInput = {
    set?: $Enums.CvStatus
  }

  export type CandidateUpdateOneRequiredWithoutCvsNestedInput = {
    create?: XOR<CandidateCreateWithoutCvsInput, CandidateUncheckedCreateWithoutCvsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutCvsInput
    upsert?: CandidateUpsertWithoutCvsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutCvsInput, CandidateUpdateWithoutCvsInput>, CandidateUncheckedUpdateWithoutCvsInput>
  }

  export type CandidateCreateNestedOneWithoutTextsInput = {
    create?: XOR<CandidateCreateWithoutTextsInput, CandidateUncheckedCreateWithoutTextsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutTextsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateUpdateOneRequiredWithoutTextsNestedInput = {
    create?: XOR<CandidateCreateWithoutTextsInput, CandidateUncheckedCreateWithoutTextsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutTextsInput
    upsert?: CandidateUpsertWithoutTextsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutTextsInput, CandidateUpdateWithoutTextsInput>, CandidateUncheckedUpdateWithoutTextsInput>
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Uint8Array
  }

  export type JobCreateNestedOneWithoutJobVectorsInput = {
    create?: XOR<JobCreateWithoutJobVectorsInput, JobUncheckedCreateWithoutJobVectorsInput>
    connectOrCreate?: JobCreateOrConnectWithoutJobVectorsInput
    connect?: JobWhereUniqueInput
  }

  export type JobUpdateOneRequiredWithoutJobVectorsNestedInput = {
    create?: XOR<JobCreateWithoutJobVectorsInput, JobUncheckedCreateWithoutJobVectorsInput>
    connectOrCreate?: JobCreateOrConnectWithoutJobVectorsInput
    upsert?: JobUpsertWithoutJobVectorsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutJobVectorsInput, JobUpdateWithoutJobVectorsInput>, JobUncheckedUpdateWithoutJobVectorsInput>
  }

  export type JobCreateNestedOneWithoutMatchesInput = {
    create?: XOR<JobCreateWithoutMatchesInput, JobUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: JobCreateOrConnectWithoutMatchesInput
    connect?: JobWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutMatchesInput = {
    create?: XOR<CandidateCreateWithoutMatchesInput, CandidateUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutMatchesInput
    connect?: CandidateWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<JobCreateWithoutMatchesInput, JobUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: JobCreateOrConnectWithoutMatchesInput
    upsert?: JobUpsertWithoutMatchesInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutMatchesInput, JobUpdateWithoutMatchesInput>, JobUncheckedUpdateWithoutMatchesInput>
  }

  export type CandidateUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<CandidateCreateWithoutMatchesInput, CandidateUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutMatchesInput
    upsert?: CandidateUpsertWithoutMatchesInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutMatchesInput, CandidateUpdateWithoutMatchesInput>, CandidateUncheckedUpdateWithoutMatchesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumCvStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CvStatus | EnumCvStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CvStatus[] | ListEnumCvStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CvStatus[] | ListEnumCvStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCvStatusFilter<$PrismaModel> | $Enums.CvStatus
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumCvStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CvStatus | EnumCvStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CvStatus[] | ListEnumCvStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CvStatus[] | ListEnumCvStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCvStatusWithAggregatesFilter<$PrismaModel> | $Enums.CvStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCvStatusFilter<$PrismaModel>
    _max?: NestedEnumCvStatusFilter<$PrismaModel>
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Uint8Array
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Uint8Array
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserCreateWithoutTenantInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    password: string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    password: string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateManyTenantInputEnvelope = {
    data: UserCreateManyTenantInput | UserCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutTenantInput = {
    id?: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
    jobVectors?: JobVectorCreateNestedManyWithoutJobInput
    matches?: MatchCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutTenantInput = {
    id?: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
    jobVectors?: JobVectorUncheckedCreateNestedManyWithoutJobInput
    matches?: MatchUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutTenantInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutTenantInput, JobUncheckedCreateWithoutTenantInput>
  }

  export type JobCreateManyTenantInputEnvelope = {
    data: JobCreateManyTenantInput | JobCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CandidateCreateWithoutTenantInput = {
    id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    cvs?: CvFileCreateNestedManyWithoutCandidateInput
    texts?: CandidateTextCreateNestedManyWithoutCandidateInput
    matches?: MatchCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutTenantInput = {
    id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    cvs?: CvFileUncheckedCreateNestedManyWithoutCandidateInput
    texts?: CandidateTextUncheckedCreateNestedManyWithoutCandidateInput
    matches?: MatchUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutTenantInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutTenantInput, CandidateUncheckedCreateWithoutTenantInput>
  }

  export type CandidateCreateManyTenantInputEnvelope = {
    data: CandidateCreateManyTenantInput | CandidateCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithWhereWithoutTenantInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTenantInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    tenantId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
  }

  export type JobUpsertWithWhereUniqueWithoutTenantInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutTenantInput, JobUncheckedUpdateWithoutTenantInput>
    create: XOR<JobCreateWithoutTenantInput, JobUncheckedCreateWithoutTenantInput>
  }

  export type JobUpdateWithWhereUniqueWithoutTenantInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutTenantInput, JobUncheckedUpdateWithoutTenantInput>
  }

  export type JobUpdateManyWithWhereWithoutTenantInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutTenantInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: StringFilter<"Job"> | string
    tenantId?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    createdById?: StringFilter<"Job"> | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
  }

  export type CandidateUpsertWithWhereUniqueWithoutTenantInput = {
    where: CandidateWhereUniqueInput
    update: XOR<CandidateUpdateWithoutTenantInput, CandidateUncheckedUpdateWithoutTenantInput>
    create: XOR<CandidateCreateWithoutTenantInput, CandidateUncheckedCreateWithoutTenantInput>
  }

  export type CandidateUpdateWithWhereUniqueWithoutTenantInput = {
    where: CandidateWhereUniqueInput
    data: XOR<CandidateUpdateWithoutTenantInput, CandidateUncheckedUpdateWithoutTenantInput>
  }

  export type CandidateUpdateManyWithWhereWithoutTenantInput = {
    where: CandidateScalarWhereInput
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyWithoutTenantInput>
  }

  export type CandidateScalarWhereInput = {
    AND?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
    OR?: CandidateScalarWhereInput[]
    NOT?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
    id?: StringFilter<"Candidate"> | string
    tenantId?: StringFilter<"Candidate"> | string
    name?: StringNullableFilter<"Candidate"> | string | null
    email?: StringNullableFilter<"Candidate"> | string | null
    phone?: StringNullableFilter<"Candidate"> | string | null
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
  }

  export type TenantCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    jobs?: JobCreateNestedManyWithoutTenantInput
    candidates?: CandidateCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutTenantInput
    candidates?: CandidateUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutUsersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
  }

  export type TenantUpsertWithoutUsersInput = {
    update: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUsersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type TenantUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUpdateManyWithoutTenantNestedInput
    candidates?: CandidateUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutTenantNestedInput
    candidates?: CandidateUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutJobsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    candidates?: CandidateCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutJobsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    candidates?: CandidateUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutJobsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutJobsInput, TenantUncheckedCreateWithoutJobsInput>
  }

  export type JobVectorCreateWithoutJobInput = {
    id?: string
    embedding: Uint8Array
  }

  export type JobVectorUncheckedCreateWithoutJobInput = {
    id?: string
    embedding: Uint8Array
  }

  export type JobVectorCreateOrConnectWithoutJobInput = {
    where: JobVectorWhereUniqueInput
    create: XOR<JobVectorCreateWithoutJobInput, JobVectorUncheckedCreateWithoutJobInput>
  }

  export type JobVectorCreateManyJobInputEnvelope = {
    data: JobVectorCreateManyJobInput | JobVectorCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutJobInput = {
    id?: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
    candidate: CandidateCreateNestedOneWithoutMatchesInput
  }

  export type MatchUncheckedCreateWithoutJobInput = {
    id?: string
    candidateId: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutJobInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutJobInput, MatchUncheckedCreateWithoutJobInput>
  }

  export type MatchCreateManyJobInputEnvelope = {
    data: MatchCreateManyJobInput | MatchCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutJobsInput = {
    update: XOR<TenantUpdateWithoutJobsInput, TenantUncheckedUpdateWithoutJobsInput>
    create: XOR<TenantCreateWithoutJobsInput, TenantUncheckedCreateWithoutJobsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutJobsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutJobsInput, TenantUncheckedUpdateWithoutJobsInput>
  }

  export type TenantUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    candidates?: CandidateUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    candidates?: CandidateUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type JobVectorUpsertWithWhereUniqueWithoutJobInput = {
    where: JobVectorWhereUniqueInput
    update: XOR<JobVectorUpdateWithoutJobInput, JobVectorUncheckedUpdateWithoutJobInput>
    create: XOR<JobVectorCreateWithoutJobInput, JobVectorUncheckedCreateWithoutJobInput>
  }

  export type JobVectorUpdateWithWhereUniqueWithoutJobInput = {
    where: JobVectorWhereUniqueInput
    data: XOR<JobVectorUpdateWithoutJobInput, JobVectorUncheckedUpdateWithoutJobInput>
  }

  export type JobVectorUpdateManyWithWhereWithoutJobInput = {
    where: JobVectorScalarWhereInput
    data: XOR<JobVectorUpdateManyMutationInput, JobVectorUncheckedUpdateManyWithoutJobInput>
  }

  export type JobVectorScalarWhereInput = {
    AND?: JobVectorScalarWhereInput | JobVectorScalarWhereInput[]
    OR?: JobVectorScalarWhereInput[]
    NOT?: JobVectorScalarWhereInput | JobVectorScalarWhereInput[]
    id?: StringFilter<"JobVector"> | string
    jobId?: StringFilter<"JobVector"> | string
    embedding?: BytesFilter<"JobVector"> | Uint8Array
  }

  export type MatchUpsertWithWhereUniqueWithoutJobInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutJobInput, MatchUncheckedUpdateWithoutJobInput>
    create: XOR<MatchCreateWithoutJobInput, MatchUncheckedCreateWithoutJobInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutJobInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutJobInput, MatchUncheckedUpdateWithoutJobInput>
  }

  export type MatchUpdateManyWithWhereWithoutJobInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutJobInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: StringFilter<"Match"> | string
    jobId?: StringFilter<"Match"> | string
    candidateId?: StringFilter<"Match"> | string
    score?: FloatFilter<"Match"> | number
    reason?: StringNullableFilter<"Match"> | string | null
    summaryId?: StringNullableFilter<"Match"> | string | null
    createdAt?: DateTimeFilter<"Match"> | Date | string
  }

  export type TenantCreateWithoutCandidatesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    jobs?: JobCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCandidatesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    jobs?: JobUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCandidatesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCandidatesInput, TenantUncheckedCreateWithoutCandidatesInput>
  }

  export type CvFileCreateWithoutCandidateInput = {
    id?: string
    s3_key: string
    file_name: string
    content_type: string
    size: number
    status?: $Enums.CvStatus
    createdAt?: Date | string
  }

  export type CvFileUncheckedCreateWithoutCandidateInput = {
    id?: string
    s3_key: string
    file_name: string
    content_type: string
    size: number
    status?: $Enums.CvStatus
    createdAt?: Date | string
  }

  export type CvFileCreateOrConnectWithoutCandidateInput = {
    where: CvFileWhereUniqueInput
    create: XOR<CvFileCreateWithoutCandidateInput, CvFileUncheckedCreateWithoutCandidateInput>
  }

  export type CvFileCreateManyCandidateInputEnvelope = {
    data: CvFileCreateManyCandidateInput | CvFileCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type CandidateTextCreateWithoutCandidateInput = {
    id?: string
    text: string
  }

  export type CandidateTextUncheckedCreateWithoutCandidateInput = {
    id?: string
    text: string
  }

  export type CandidateTextCreateOrConnectWithoutCandidateInput = {
    where: CandidateTextWhereUniqueInput
    create: XOR<CandidateTextCreateWithoutCandidateInput, CandidateTextUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateTextCreateManyCandidateInputEnvelope = {
    data: CandidateTextCreateManyCandidateInput | CandidateTextCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutCandidateInput = {
    id?: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutMatchesInput
  }

  export type MatchUncheckedCreateWithoutCandidateInput = {
    id?: string
    jobId: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutCandidateInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutCandidateInput, MatchUncheckedCreateWithoutCandidateInput>
  }

  export type MatchCreateManyCandidateInputEnvelope = {
    data: MatchCreateManyCandidateInput | MatchCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutCandidatesInput = {
    update: XOR<TenantUpdateWithoutCandidatesInput, TenantUncheckedUpdateWithoutCandidatesInput>
    create: XOR<TenantCreateWithoutCandidatesInput, TenantUncheckedCreateWithoutCandidatesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCandidatesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCandidatesInput, TenantUncheckedUpdateWithoutCandidatesInput>
  }

  export type TenantUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    jobs?: JobUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    jobs?: JobUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CvFileUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CvFileWhereUniqueInput
    update: XOR<CvFileUpdateWithoutCandidateInput, CvFileUncheckedUpdateWithoutCandidateInput>
    create: XOR<CvFileCreateWithoutCandidateInput, CvFileUncheckedCreateWithoutCandidateInput>
  }

  export type CvFileUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CvFileWhereUniqueInput
    data: XOR<CvFileUpdateWithoutCandidateInput, CvFileUncheckedUpdateWithoutCandidateInput>
  }

  export type CvFileUpdateManyWithWhereWithoutCandidateInput = {
    where: CvFileScalarWhereInput
    data: XOR<CvFileUpdateManyMutationInput, CvFileUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CvFileScalarWhereInput = {
    AND?: CvFileScalarWhereInput | CvFileScalarWhereInput[]
    OR?: CvFileScalarWhereInput[]
    NOT?: CvFileScalarWhereInput | CvFileScalarWhereInput[]
    id?: StringFilter<"CvFile"> | string
    candidateId?: StringFilter<"CvFile"> | string
    s3_key?: StringFilter<"CvFile"> | string
    file_name?: StringFilter<"CvFile"> | string
    content_type?: StringFilter<"CvFile"> | string
    size?: IntFilter<"CvFile"> | number
    status?: EnumCvStatusFilter<"CvFile"> | $Enums.CvStatus
    createdAt?: DateTimeFilter<"CvFile"> | Date | string
  }

  export type CandidateTextUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CandidateTextWhereUniqueInput
    update: XOR<CandidateTextUpdateWithoutCandidateInput, CandidateTextUncheckedUpdateWithoutCandidateInput>
    create: XOR<CandidateTextCreateWithoutCandidateInput, CandidateTextUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateTextUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CandidateTextWhereUniqueInput
    data: XOR<CandidateTextUpdateWithoutCandidateInput, CandidateTextUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidateTextUpdateManyWithWhereWithoutCandidateInput = {
    where: CandidateTextScalarWhereInput
    data: XOR<CandidateTextUpdateManyMutationInput, CandidateTextUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CandidateTextScalarWhereInput = {
    AND?: CandidateTextScalarWhereInput | CandidateTextScalarWhereInput[]
    OR?: CandidateTextScalarWhereInput[]
    NOT?: CandidateTextScalarWhereInput | CandidateTextScalarWhereInput[]
    id?: StringFilter<"CandidateText"> | string
    candidateId?: StringFilter<"CandidateText"> | string
    text?: StringFilter<"CandidateText"> | string
  }

  export type MatchUpsertWithWhereUniqueWithoutCandidateInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutCandidateInput, MatchUncheckedUpdateWithoutCandidateInput>
    create: XOR<MatchCreateWithoutCandidateInput, MatchUncheckedCreateWithoutCandidateInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutCandidateInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutCandidateInput, MatchUncheckedUpdateWithoutCandidateInput>
  }

  export type MatchUpdateManyWithWhereWithoutCandidateInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CandidateCreateWithoutCvsInput = {
    id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCandidatesInput
    texts?: CandidateTextCreateNestedManyWithoutCandidateInput
    matches?: MatchCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutCvsInput = {
    id?: string
    tenantId: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    texts?: CandidateTextUncheckedCreateNestedManyWithoutCandidateInput
    matches?: MatchUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutCvsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutCvsInput, CandidateUncheckedCreateWithoutCvsInput>
  }

  export type CandidateUpsertWithoutCvsInput = {
    update: XOR<CandidateUpdateWithoutCvsInput, CandidateUncheckedUpdateWithoutCvsInput>
    create: XOR<CandidateCreateWithoutCvsInput, CandidateUncheckedCreateWithoutCvsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutCvsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutCvsInput, CandidateUncheckedUpdateWithoutCvsInput>
  }

  export type CandidateUpdateWithoutCvsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCandidatesNestedInput
    texts?: CandidateTextUpdateManyWithoutCandidateNestedInput
    matches?: MatchUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutCvsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    texts?: CandidateTextUncheckedUpdateManyWithoutCandidateNestedInput
    matches?: MatchUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateWithoutTextsInput = {
    id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCandidatesInput
    cvs?: CvFileCreateNestedManyWithoutCandidateInput
    matches?: MatchCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutTextsInput = {
    id?: string
    tenantId: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    cvs?: CvFileUncheckedCreateNestedManyWithoutCandidateInput
    matches?: MatchUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutTextsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutTextsInput, CandidateUncheckedCreateWithoutTextsInput>
  }

  export type CandidateUpsertWithoutTextsInput = {
    update: XOR<CandidateUpdateWithoutTextsInput, CandidateUncheckedUpdateWithoutTextsInput>
    create: XOR<CandidateCreateWithoutTextsInput, CandidateUncheckedCreateWithoutTextsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutTextsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutTextsInput, CandidateUncheckedUpdateWithoutTextsInput>
  }

  export type CandidateUpdateWithoutTextsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCandidatesNestedInput
    cvs?: CvFileUpdateManyWithoutCandidateNestedInput
    matches?: MatchUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutTextsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cvs?: CvFileUncheckedUpdateManyWithoutCandidateNestedInput
    matches?: MatchUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type JobCreateWithoutJobVectorsInput = {
    id?: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutJobsInput
    matches?: MatchCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutJobVectorsInput = {
    id?: string
    tenantId: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutJobVectorsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutJobVectorsInput, JobUncheckedCreateWithoutJobVectorsInput>
  }

  export type JobUpsertWithoutJobVectorsInput = {
    update: XOR<JobUpdateWithoutJobVectorsInput, JobUncheckedUpdateWithoutJobVectorsInput>
    create: XOR<JobCreateWithoutJobVectorsInput, JobUncheckedCreateWithoutJobVectorsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutJobVectorsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutJobVectorsInput, JobUncheckedUpdateWithoutJobVectorsInput>
  }

  export type JobUpdateWithoutJobVectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutJobsNestedInput
    matches?: MatchUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutJobVectorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateWithoutMatchesInput = {
    id?: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutJobsInput
    jobVectors?: JobVectorCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutMatchesInput = {
    id?: string
    tenantId: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
    jobVectors?: JobVectorUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutMatchesInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutMatchesInput, JobUncheckedCreateWithoutMatchesInput>
  }

  export type CandidateCreateWithoutMatchesInput = {
    id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCandidatesInput
    cvs?: CvFileCreateNestedManyWithoutCandidateInput
    texts?: CandidateTextCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutMatchesInput = {
    id?: string
    tenantId: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
    cvs?: CvFileUncheckedCreateNestedManyWithoutCandidateInput
    texts?: CandidateTextUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutMatchesInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutMatchesInput, CandidateUncheckedCreateWithoutMatchesInput>
  }

  export type JobUpsertWithoutMatchesInput = {
    update: XOR<JobUpdateWithoutMatchesInput, JobUncheckedUpdateWithoutMatchesInput>
    create: XOR<JobCreateWithoutMatchesInput, JobUncheckedCreateWithoutMatchesInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutMatchesInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutMatchesInput, JobUncheckedUpdateWithoutMatchesInput>
  }

  export type JobUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutJobsNestedInput
    jobVectors?: JobVectorUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobVectors?: JobVectorUncheckedUpdateManyWithoutJobNestedInput
  }

  export type CandidateUpsertWithoutMatchesInput = {
    update: XOR<CandidateUpdateWithoutMatchesInput, CandidateUncheckedUpdateWithoutMatchesInput>
    create: XOR<CandidateCreateWithoutMatchesInput, CandidateUncheckedCreateWithoutMatchesInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutMatchesInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutMatchesInput, CandidateUncheckedUpdateWithoutMatchesInput>
  }

  export type CandidateUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCandidatesNestedInput
    cvs?: CvFileUpdateManyWithoutCandidateNestedInput
    texts?: CandidateTextUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cvs?: CvFileUncheckedUpdateManyWithoutCandidateNestedInput
    texts?: CandidateTextUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type UserCreateManyTenantInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    password: string
    createdAt?: Date | string
  }

  export type JobCreateManyTenantInput = {
    id?: string
    title: string
    description: string
    createdById: string
    createdAt?: Date | string
  }

  export type CandidateCreateManyTenantInput = {
    id?: string
    name?: string | null
    email?: string | null
    phone?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobVectors?: JobVectorUpdateManyWithoutJobNestedInput
    matches?: MatchUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobVectors?: JobVectorUncheckedUpdateManyWithoutJobNestedInput
    matches?: MatchUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cvs?: CvFileUpdateManyWithoutCandidateNestedInput
    texts?: CandidateTextUpdateManyWithoutCandidateNestedInput
    matches?: MatchUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cvs?: CvFileUncheckedUpdateManyWithoutCandidateNestedInput
    texts?: CandidateTextUncheckedUpdateManyWithoutCandidateNestedInput
    matches?: MatchUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobVectorCreateManyJobInput = {
    id?: string
    embedding: Uint8Array
  }

  export type MatchCreateManyJobInput = {
    id?: string
    candidateId: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
  }

  export type JobVectorUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type JobVectorUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type JobVectorUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    embedding?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type MatchUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidateUpdateOneRequiredWithoutMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CvFileCreateManyCandidateInput = {
    id?: string
    s3_key: string
    file_name: string
    content_type: string
    size: number
    status?: $Enums.CvStatus
    createdAt?: Date | string
  }

  export type CandidateTextCreateManyCandidateInput = {
    id?: string
    text: string
  }

  export type MatchCreateManyCandidateInput = {
    id?: string
    jobId: string
    score: number
    reason?: string | null
    summaryId?: string | null
    createdAt?: Date | string
  }

  export type CvFileUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    content_type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    status?: EnumCvStatusFieldUpdateOperationsInput | $Enums.CvStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CvFileUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    content_type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    status?: EnumCvStatusFieldUpdateOperationsInput | $Enums.CvStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CvFileUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    s3_key?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    content_type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    status?: EnumCvStatusFieldUpdateOperationsInput | $Enums.CvStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateTextUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateTextUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateTextUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    summaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
enum UserRole {
  ADMIN
  RECRUITER
}

enum CvStatus {
  PENDING
  PARSING
  PARSED
  ERROR
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String      @id @default(uuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  users      User[]
  jobs       Job[]
  candidates Candidate[]
}

model User {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  email     String   @unique
  name      String?
  role      UserRole @default(RECRUITER)
  password  String
  createdAt DateTime @default(now())
}

model Job {
  id          String      @id @default(uuid())
  tenantId    String
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  title       String
  description String
  createdById String
  createdAt   DateTime    @default(now())
  jobVectors  JobVector[]
  matches     Match[]
}

model Candidate {
  id        String          @id @default(uuid())
  tenantId  String
  tenant    Tenant          @relation(fields: [tenantId], references: [id])
  name      String?
  email     String?
  phone     String?
  cvs       CvFile[]
  texts     CandidateText[]
  matches   Match[]
  createdAt DateTime        @default(now())
}

model CvFile {
  id           String    @id @default(uuid())
  candidateId  String
  candidate    Candidate @relation(fields: [candidateId], references: [id])
  s3_key       String
  file_name    String
  content_type String
  size         Int
  status       CvStatus  @default(PENDING)
  createdAt    DateTime  @default(now())
}

model CandidateText {
  id          String    @id @default(uuid())
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  text        String    @db.Text
}

model Vector {
  id              String  @id @default(uuid())
  candidateTextId String?
  candidateId     String?
  embedding       Bytes // Will be migrated to pgvector via raw SQL
}

model JobVector {
  id        String @id @default(uuid())
  jobId     String
  job       Job    @relation(fields: [jobId], references: [id])
  embedding Bytes // Will be migrated to pgvector via raw SQL
}

model Match {
  id          String    @id @default(uuid())
  jobId       String
  job         Job       @relation(fields: [jobId], references: [id])
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  score       Float
  reason      String?   @db.Text
  summaryId   String?
  createdAt   DateTime  @default(now())
}

model GeneratedSummary {
  id          String   @id @default(uuid())
  jobId       String
  candidateId String
  s3_key      String
  text        String   @db.Text
  createdAt   DateTime @default(now())
}
